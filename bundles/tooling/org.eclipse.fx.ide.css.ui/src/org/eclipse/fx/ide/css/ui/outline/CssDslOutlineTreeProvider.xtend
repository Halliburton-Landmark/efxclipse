/*
 * generated by Xtext 2.9.0
 */
package org.eclipse.fx.ide.css.ui.outline

import org.eclipse.fx.ide.css.cssDsl.CssDeclaration
import org.eclipse.fx.ide.css.cssDsl.CssProperty
import org.eclipse.fx.ide.css.cssDsl.Ruleset
import org.eclipse.fx.ide.css.cssDsl.Stylesheet
import org.eclipse.fx.ide.css.util.Util
import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode

/**
 * Customization of the default outline structure.
 *
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#outline
 */
class CssDslOutlineTreeProvider extends DefaultOutlineTreeProvider {

	extension Util util = new Util()

	def _createChildren(DocumentRootNode parentNode, Stylesheet stylesheet) {
		
		for (Ruleset ruleset : stylesheet.getRuleset()) {
			for (s : ruleset.getSelectors()) {
				val isLeaf = ruleset.getDeclarations().isEmpty();
				val node = createEObjectNode(parentNode, ruleset);
				node.setShortTextRegion(locationInFileProvider.getSignificantTextRegion(s));
				if (!isLeaf) {
					createChildren(node, ruleset);
				}
			}
		}
	}
	
	def _text(Ruleset ruleset) {
		if (ruleset.isMetaDataBlock) {
			"Meta Data"
		}
		else {
			labelProvider.getText(ruleset)
		}
	}
	
	def _createChildren(IOutlineNode parentNode, Ruleset ruleset) {
		for (d : ruleset.getDeclarations()) {
			
			val node = createEObjectNode(parentNode, d);
			node.setShortTextRegion(locationInFileProvider.getSignificantTextRegion(d.getProperty()));
		}
	}
	
	def _image(CssDeclaration d) {
		labelProvider.getImage(d.property)
	}
	
	def _text(CssDeclaration d) {
		val valueBuilder = new StringBuilder();
		val iterator = d.getValueTokens().iterator();
			while (iterator.hasNext()) {
				val next = iterator.next();
				valueBuilder.append(labelProvider.getText(next));
			}
		labelProvider.getText(d.getProperty()) + ": " +valueBuilder.toString().trim() + (if (d.isImportant()) " !important" else "")
	}
	
	def _isLeaf(CssDeclaration d) {
		true
	}


	def _image(Ruleset o) {
		labelProvider.getImage(o)
	}
	
	def _image(CssProperty o) {
		labelProvider.getImage(o)
	}
	
	def _isLeaf(CssProperty o) {
		true
	}
	
	def _isLeaf(Ruleset o) {
		o.declarations.empty
	}


}
