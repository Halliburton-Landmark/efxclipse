/**
 * generated by Xtext 2.9.0
 */
package org.eclipse.fx.ide.css.ui.labeling;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.fx.ide.css.cssDsl.AttributeSelector;
import org.eclipse.fx.ide.css.cssDsl.ClassSelector;
import org.eclipse.fx.ide.css.cssDsl.CssProperty;
import org.eclipse.fx.ide.css.cssDsl.CssSelector;
import org.eclipse.fx.ide.css.cssDsl.CssTok;
import org.eclipse.fx.ide.css.cssDsl.ElementSelector;
import org.eclipse.fx.ide.css.cssDsl.FuncTok;
import org.eclipse.fx.ide.css.cssDsl.IdSelector;
import org.eclipse.fx.ide.css.cssDsl.IdentifierTok;
import org.eclipse.fx.ide.css.cssDsl.NumberTok;
import org.eclipse.fx.ide.css.cssDsl.PseudoClass;
import org.eclipse.fx.ide.css.cssDsl.PseudoClassFunction;
import org.eclipse.fx.ide.css.cssDsl.Ruleset;
import org.eclipse.fx.ide.css.cssDsl.Selector;
import org.eclipse.fx.ide.css.cssDsl.SimpleSelector;
import org.eclipse.fx.ide.css.cssDsl.SimpleSelectorForNegation;
import org.eclipse.fx.ide.css.cssDsl.StringTok;
import org.eclipse.fx.ide.css.cssDsl.Stylesheet;
import org.eclipse.fx.ide.css.cssDsl.SymbolTok;
import org.eclipse.fx.ide.css.cssDsl.URLType;
import org.eclipse.fx.ide.css.cssDsl.UniversalSelector;
import org.eclipse.fx.ide.css.cssDsl.UrlTok;
import org.eclipse.fx.ide.css.cssDsl.WSTok;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
@SuppressWarnings("all")
public class CssDslLabelProvider extends DefaultEObjectLabelProvider {
  @Inject
  public CssDslLabelProvider(final AdapterFactoryLabelProvider delegate) {
    super(delegate);
  }
  
  @Override
  protected String convertToString(final Object text) {
    String _xifexpression = null;
    if ((text instanceof CharSequence)) {
      _xifexpression = ((CharSequence)text).toString();
    } else {
      _xifexpression = super.convertToString(text);
    }
    return _xifexpression;
  }
  
  public CharSequence text(final StringTok strTok) {
    CharSequence _xifexpression = null;
    String _value = strTok.getValue();
    boolean _notEquals = (!Objects.equal(_value, null));
    if (_notEquals) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("\"");
      String _value_1 = strTok.getValue();
      _builder.append(_value_1, "");
      _builder.append("\"");
      _xifexpression = _builder;
    } else {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("null");
      _xifexpression = _builder_1;
    }
    return _xifexpression;
  }
  
  public String text(final Ruleset value) {
    EList<Selector> _selectors = value.getSelectors();
    final Function1<Selector, String> _function = (Selector s) -> {
      return this.text(s);
    };
    List<String> _map = ListExtensions.<Selector, String>map(_selectors, _function);
    return IterableExtensions.join(_map, ", ");
  }
  
  public String text(final Selector value) {
    String _xblockexpression = null;
    {
      final StringBuilder b = new StringBuilder();
      EList<SimpleSelector> _simpleselectors = value.getSimpleselectors();
      for (final SimpleSelector ss : _simpleselectors) {
        String _text = this.text(ss);
        b.append(_text);
      }
      Selector _selector = value.getSelector();
      boolean _notEquals = (!Objects.equal(_selector, null));
      if (_notEquals) {
        String _combinator = value.getCombinator();
        boolean _notEquals_1 = (!Objects.equal(_combinator, null));
        if (_notEquals_1) {
          String _combinator_1 = value.getCombinator();
          String _plus = (" " + _combinator_1);
          b.append(_plus);
        }
        Selector _selector_1 = value.getSelector();
        String _text_1 = this.text(_selector_1);
        String _plus_1 = (" " + _text_1);
        b.append(_plus_1);
      }
      _xblockexpression = b.toString();
    }
    return _xblockexpression;
  }
  
  public String image(final Selector s) {
    return "selector_16x16.png";
  }
  
  public String image(final Ruleset ele) {
    return "selector_16x16.png";
  }
  
  public String image(final CssProperty ele) {
    return "property_16x16.png";
  }
  
  public String image(final CssSelector cssSelector) {
    return "selector_16x16.png";
  }
  
  public String expand(final PseudoClassFunction pseudoFunc) {
    final StringBuilder b = new StringBuilder();
    boolean _isNot = pseudoFunc.isNot();
    if (_isNot) {
      b.append("not(");
      SimpleSelectorForNegation _paramSelector = pseudoFunc.getParamSelector();
      String _text = this.getText(_paramSelector);
      b.append(_text);
      b.append(")");
    } else {
      String _name = pseudoFunc.getName();
      b.append(_name);
      b.append("(");
      EList<CssTok> _params = pseudoFunc.getParams();
      final Iterator<CssTok> iterator = _params.iterator();
      while (iterator.hasNext()) {
        {
          final CssTok next = iterator.next();
          String _text_1 = this.getText(next);
          b.append(_text_1);
        }
      }
      b.append(")");
    }
    return b.toString();
  }
  
  public String text(final IdentifierTok tok) {
    return tok.getName();
  }
  
  public String text(final NumberTok tok) {
    double _val = tok.getVal();
    return String.valueOf(_val);
  }
  
  public String text(final SymbolTok tok) {
    return tok.getSymbol();
  }
  
  public String text(final WSTok tok) {
    return " ";
  }
  
  public CharSequence text(final FuncTok tok) {
    StringConcatenation _builder = new StringConcatenation();
    IdentifierTok _name = tok.getName();
    String _text = this.getText(_name);
    _builder.append(_text, "");
    _builder.append("(");
    EList<CssTok> _params = tok.getParams();
    final Function1<CssTok, String> _function = (CssTok t) -> {
      return this.getText(t);
    };
    List<String> _map = ListExtensions.<CssTok, String>map(_params, _function);
    String _join = IterableExtensions.join(_map, ", ");
    _builder.append(_join, "");
    _builder.append(")");
    return _builder;
  }
  
  public CharSequence text(final UrlTok tok) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("url(");
    URLType _url = tok.getUrl();
    String _url_1 = _url.getUrl();
    _builder.append(_url_1, "");
    _builder.append(")");
    return _builder;
  }
  
  public CharSequence text(final EObject object) {
    StringConcatenation _builder = new StringConcatenation();
    String _string = object.toString();
    _builder.append(_string, "");
    return _builder;
  }
  
  public String text(final CssTok tok) {
    return tok.toString();
  }
  
  public CharSequence text(final ElementSelector s) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = s.getName();
    _builder.append(_name, "");
    return _builder;
  }
  
  public CharSequence text(final CssSelector s) {
    return this.dispatchCssSelector(s);
  }
  
  protected CharSequence _dispatchCssSelector(final IdSelector s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#");
    String _name = s.getName();
    _builder.append(_name, "");
    return _builder;
  }
  
  protected CharSequence _dispatchCssSelector(final PseudoClass s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(":");
    _builder.append(s, "");
    return _builder;
  }
  
  protected CharSequence _dispatchCssSelector(final PseudoClassFunction s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(":");
    String _expand = this.expand(s);
    _builder.append(_expand, "");
    return _builder;
  }
  
  protected CharSequence _dispatchCssSelector(final AttributeSelector s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("[");
    String _expand = this.expand(s);
    _builder.append(_expand, "");
    _builder.append("]");
    return _builder;
  }
  
  protected CharSequence _dispatchCssSelector(final ClassSelector s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(".");
    String _name = s.getName();
    _builder.append(_name, "");
    return _builder;
  }
  
  public CharSequence text(final CssProperty p) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = p.getName();
    _builder.append(_name, "");
    return _builder;
  }
  
  public String expand(final AttributeSelector s) {
    boolean _and = false;
    String _op = s.getOp();
    boolean _notEquals = (!Objects.equal(_op, null));
    if (!_notEquals) {
      _and = false;
    } else {
      String _value = s.getValue();
      boolean _notEquals_1 = (!Objects.equal(_value, null));
      _and = _notEquals_1;
    }
    if (_and) {
      String _name = s.getName();
      String _op_1 = s.getOp();
      String _plus = (_name + _op_1);
      String _value_1 = s.getValue();
      return (_plus + _value_1);
    } else {
      return s.getName();
    }
  }
  
  public String text(final SimpleSelectorForNegation value) {
    final StringBuilder b = new StringBuilder();
    ElementSelector _element = value.getElement();
    boolean _notEquals = (!Objects.equal(_element, null));
    if (_notEquals) {
      ElementSelector _element_1 = value.getElement();
      String _text = this.getText(_element_1);
      b.append(_text);
    } else {
      UniversalSelector _universal = value.getUniversal();
      boolean _notEquals_1 = (!Objects.equal(_universal, null));
      if (_notEquals_1) {
        b.append("*");
      }
    }
    EList<CssSelector> _subSelectors = value.getSubSelectors();
    for (final CssSelector sub : _subSelectors) {
      String _text_1 = this.getText(sub);
      b.append(_text_1);
    }
    return b.toString();
  }
  
  public String text(final SimpleSelector value) {
    final StringBuilder b = new StringBuilder();
    ElementSelector _element = value.getElement();
    boolean _notEquals = (!Objects.equal(_element, null));
    if (_notEquals) {
      ElementSelector _element_1 = value.getElement();
      CharSequence _text = this.text(_element_1);
      b.append(_text);
    } else {
      UniversalSelector _universal = value.getUniversal();
      boolean _notEquals_1 = (!Objects.equal(_universal, null));
      if (_notEquals_1) {
        b.append("*");
      }
    }
    EList<CssSelector> _subSelectors = value.getSubSelectors();
    for (final CssSelector sub : _subSelectors) {
      CharSequence _text_1 = this.text(sub);
      b.append(_text_1);
    }
    return b.toString();
  }
  
  public CharSequence text(final Stylesheet value) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("stylesheet");
    return _builder;
  }
  
  public CharSequence dispatchCssSelector(final CssSelector s) {
    if (s instanceof PseudoClass) {
      return _dispatchCssSelector((PseudoClass)s);
    } else if (s instanceof PseudoClassFunction) {
      return _dispatchCssSelector((PseudoClassFunction)s);
    } else if (s instanceof AttributeSelector) {
      return _dispatchCssSelector((AttributeSelector)s);
    } else if (s instanceof ClassSelector) {
      return _dispatchCssSelector((ClassSelector)s);
    } else if (s instanceof IdSelector) {
      return _dispatchCssSelector((IdSelector)s);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(s).toString());
    }
  }
}
