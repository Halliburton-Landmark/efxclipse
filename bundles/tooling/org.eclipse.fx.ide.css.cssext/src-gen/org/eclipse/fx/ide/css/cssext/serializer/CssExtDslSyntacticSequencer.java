/*
 * generated by Xtext 2.9.0
 */
package org.eclipse.fx.ide.css.cssext.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.fx.ide.css.cssext.services.CssExtDslGrammarAccess;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class CssExtDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected CssExtDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_CSSRuleFunc_WSTerminalRuleCall_3_a;
	protected AbstractElementAlias match_CSSRuleLiteral_WSTerminalRuleCall_1_1_a;
	protected AbstractElementAlias match_CSSRuleRef_WSTerminalRuleCall_0_1_a;
	protected AbstractElementAlias match_CSSRuleSymbol_WSTerminalRuleCall_1_1_a;
	protected AbstractElementAlias match_CSSType_WSTerminalRuleCall_0_10_a;
	protected AbstractElementAlias match_CSSType_WSTerminalRuleCall_0_1_1_a;
	protected AbstractElementAlias match_CSSType_WSTerminalRuleCall_0_4_a;
	protected AbstractElementAlias match_CSSType_WSTerminalRuleCall_0_6_a;
	protected AbstractElementAlias match_CSSType_WSTerminalRuleCall_0_8_a;
	protected AbstractElementAlias match_CSSType_WSTerminalRuleCall_1_10_a;
	protected AbstractElementAlias match_CSSType_WSTerminalRuleCall_1_1_1_a;
	protected AbstractElementAlias match_CSSType_WSTerminalRuleCall_1_4_a;
	protected AbstractElementAlias match_CSSType_WSTerminalRuleCall_1_6_a;
	protected AbstractElementAlias match_CSSType_WSTerminalRuleCall_1_8_a;
	protected AbstractElementAlias match_CSSType_WSTerminalRuleCall_2_1_1_a;
	protected AbstractElementAlias match_CSSType_WSTerminalRuleCall_3_0_1_a;
	protected AbstractElementAlias match_CSSType_WSTerminalRuleCall_3_1_0_1_a;
	protected AbstractElementAlias match_CSSType_WSTerminalRuleCall_3_1_1_1_a;
	protected AbstractElementAlias match_CSSType_WSTerminalRuleCall_3_1_2_1_a;
	protected AbstractElementAlias match_CSSType_WSTerminalRuleCall_3_1_3_1_a;
	protected AbstractElementAlias match_PackageDefinition_WSTerminalRuleCall_0_1_a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (CssExtDslGrammarAccess) access;
		match_CSSRuleFunc_WSTerminalRuleCall_3_a = new TokenAlias(true, true, grammarAccess.getCSSRuleFuncAccess().getWSTerminalRuleCall_3());
		match_CSSRuleLiteral_WSTerminalRuleCall_1_1_a = new TokenAlias(true, true, grammarAccess.getCSSRuleLiteralAccess().getWSTerminalRuleCall_1_1());
		match_CSSRuleRef_WSTerminalRuleCall_0_1_a = new TokenAlias(true, true, grammarAccess.getCSSRuleRefAccess().getWSTerminalRuleCall_0_1());
		match_CSSRuleSymbol_WSTerminalRuleCall_1_1_a = new TokenAlias(true, true, grammarAccess.getCSSRuleSymbolAccess().getWSTerminalRuleCall_1_1());
		match_CSSType_WSTerminalRuleCall_0_10_a = new TokenAlias(true, true, grammarAccess.getCSSTypeAccess().getWSTerminalRuleCall_0_10());
		match_CSSType_WSTerminalRuleCall_0_1_1_a = new TokenAlias(true, true, grammarAccess.getCSSTypeAccess().getWSTerminalRuleCall_0_1_1());
		match_CSSType_WSTerminalRuleCall_0_4_a = new TokenAlias(true, true, grammarAccess.getCSSTypeAccess().getWSTerminalRuleCall_0_4());
		match_CSSType_WSTerminalRuleCall_0_6_a = new TokenAlias(true, true, grammarAccess.getCSSTypeAccess().getWSTerminalRuleCall_0_6());
		match_CSSType_WSTerminalRuleCall_0_8_a = new TokenAlias(true, true, grammarAccess.getCSSTypeAccess().getWSTerminalRuleCall_0_8());
		match_CSSType_WSTerminalRuleCall_1_10_a = new TokenAlias(true, true, grammarAccess.getCSSTypeAccess().getWSTerminalRuleCall_1_10());
		match_CSSType_WSTerminalRuleCall_1_1_1_a = new TokenAlias(true, true, grammarAccess.getCSSTypeAccess().getWSTerminalRuleCall_1_1_1());
		match_CSSType_WSTerminalRuleCall_1_4_a = new TokenAlias(true, true, grammarAccess.getCSSTypeAccess().getWSTerminalRuleCall_1_4());
		match_CSSType_WSTerminalRuleCall_1_6_a = new TokenAlias(true, true, grammarAccess.getCSSTypeAccess().getWSTerminalRuleCall_1_6());
		match_CSSType_WSTerminalRuleCall_1_8_a = new TokenAlias(true, true, grammarAccess.getCSSTypeAccess().getWSTerminalRuleCall_1_8());
		match_CSSType_WSTerminalRuleCall_2_1_1_a = new TokenAlias(true, true, grammarAccess.getCSSTypeAccess().getWSTerminalRuleCall_2_1_1());
		match_CSSType_WSTerminalRuleCall_3_0_1_a = new TokenAlias(true, true, grammarAccess.getCSSTypeAccess().getWSTerminalRuleCall_3_0_1());
		match_CSSType_WSTerminalRuleCall_3_1_0_1_a = new TokenAlias(true, true, grammarAccess.getCSSTypeAccess().getWSTerminalRuleCall_3_1_0_1());
		match_CSSType_WSTerminalRuleCall_3_1_1_1_a = new TokenAlias(true, true, grammarAccess.getCSSTypeAccess().getWSTerminalRuleCall_3_1_1_1());
		match_CSSType_WSTerminalRuleCall_3_1_2_1_a = new TokenAlias(true, true, grammarAccess.getCSSTypeAccess().getWSTerminalRuleCall_3_1_2_1());
		match_CSSType_WSTerminalRuleCall_3_1_3_1_a = new TokenAlias(true, true, grammarAccess.getCSSTypeAccess().getWSTerminalRuleCall_3_1_3_1());
		match_PackageDefinition_WSTerminalRuleCall_0_1_a = new TokenAlias(true, true, grammarAccess.getPackageDefinitionAccess().getWSTerminalRuleCall_0_1());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getWSRule())
			return getWSToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal WS			: (' '|'\t'|'\r'|'\n')+;
	 */
	protected String getWSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return " ";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_CSSRuleFunc_WSTerminalRuleCall_3_a.equals(syntax))
				emit_CSSRuleFunc_WSTerminalRuleCall_3_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CSSRuleLiteral_WSTerminalRuleCall_1_1_a.equals(syntax))
				emit_CSSRuleLiteral_WSTerminalRuleCall_1_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CSSRuleRef_WSTerminalRuleCall_0_1_a.equals(syntax))
				emit_CSSRuleRef_WSTerminalRuleCall_0_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CSSRuleSymbol_WSTerminalRuleCall_1_1_a.equals(syntax))
				emit_CSSRuleSymbol_WSTerminalRuleCall_1_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CSSType_WSTerminalRuleCall_0_10_a.equals(syntax))
				emit_CSSType_WSTerminalRuleCall_0_10_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CSSType_WSTerminalRuleCall_0_1_1_a.equals(syntax))
				emit_CSSType_WSTerminalRuleCall_0_1_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CSSType_WSTerminalRuleCall_0_4_a.equals(syntax))
				emit_CSSType_WSTerminalRuleCall_0_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CSSType_WSTerminalRuleCall_0_6_a.equals(syntax))
				emit_CSSType_WSTerminalRuleCall_0_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CSSType_WSTerminalRuleCall_0_8_a.equals(syntax))
				emit_CSSType_WSTerminalRuleCall_0_8_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CSSType_WSTerminalRuleCall_1_10_a.equals(syntax))
				emit_CSSType_WSTerminalRuleCall_1_10_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CSSType_WSTerminalRuleCall_1_1_1_a.equals(syntax))
				emit_CSSType_WSTerminalRuleCall_1_1_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CSSType_WSTerminalRuleCall_1_4_a.equals(syntax))
				emit_CSSType_WSTerminalRuleCall_1_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CSSType_WSTerminalRuleCall_1_6_a.equals(syntax))
				emit_CSSType_WSTerminalRuleCall_1_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CSSType_WSTerminalRuleCall_1_8_a.equals(syntax))
				emit_CSSType_WSTerminalRuleCall_1_8_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CSSType_WSTerminalRuleCall_2_1_1_a.equals(syntax))
				emit_CSSType_WSTerminalRuleCall_2_1_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CSSType_WSTerminalRuleCall_3_0_1_a.equals(syntax))
				emit_CSSType_WSTerminalRuleCall_3_0_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CSSType_WSTerminalRuleCall_3_1_0_1_a.equals(syntax))
				emit_CSSType_WSTerminalRuleCall_3_1_0_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CSSType_WSTerminalRuleCall_3_1_1_1_a.equals(syntax))
				emit_CSSType_WSTerminalRuleCall_3_1_1_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CSSType_WSTerminalRuleCall_3_1_2_1_a.equals(syntax))
				emit_CSSType_WSTerminalRuleCall_3_1_2_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CSSType_WSTerminalRuleCall_3_1_3_1_a.equals(syntax))
				emit_CSSType_WSTerminalRuleCall_3_1_3_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PackageDefinition_WSTerminalRuleCall_0_1_a.equals(syntax))
				emit_PackageDefinition_WSTerminalRuleCall_0_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ValidID '(' (ambiguity) params=CSSRuleOr
	 */
	protected void emit_CSSRuleFunc_WSTerminalRuleCall_3_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     doku=Doku (ambiguity) value=ID
	 */
	protected void emit_CSSRuleLiteral_WSTerminalRuleCall_1_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     doku=Doku (ambiguity) '<' ref=[Definition|QualifiedName]
	 */
	protected void emit_CSSRuleRef_WSTerminalRuleCall_0_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     doku=Doku (ambiguity) symbol='%'
	 *     doku=Doku (ambiguity) symbol=','
	 */
	protected void emit_CSSRuleSymbol_WSTerminalRuleCall_1_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     to=INT (ambiguity) ')' (rule end)
	 */
	protected void emit_CSSType_WSTerminalRuleCall_0_10_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     doku=Doku (ambiguity) type='@INT'
	 */
	protected void emit_CSSType_WSTerminalRuleCall_0_1_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     type='@INT' '(' (ambiguity) from=INT
	 */
	protected void emit_CSSType_WSTerminalRuleCall_0_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     from=INT (ambiguity) '->' WS* to=INT
	 */
	protected void emit_CSSType_WSTerminalRuleCall_0_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     from=INT WS* '->' (ambiguity) to=INT
	 */
	protected void emit_CSSType_WSTerminalRuleCall_0_8_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     to=DOUBLE (ambiguity) ')' (rule end)
	 */
	protected void emit_CSSType_WSTerminalRuleCall_1_10_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     doku=Doku (ambiguity) type='@NUM'
	 */
	protected void emit_CSSType_WSTerminalRuleCall_1_1_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     type='@NUM' '(' (ambiguity) from=DOUBLE
	 */
	protected void emit_CSSType_WSTerminalRuleCall_1_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     from=DOUBLE (ambiguity) '->' WS* to=DOUBLE
	 */
	protected void emit_CSSType_WSTerminalRuleCall_1_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     from=DOUBLE WS* '->' (ambiguity) to=DOUBLE
	 */
	protected void emit_CSSType_WSTerminalRuleCall_1_8_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     doku=Doku (ambiguity) type='@PROPERTY_REF'
	 */
	protected void emit_CSSType_WSTerminalRuleCall_2_1_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     doku=Doku (ambiguity) type='@INT'
	 *     doku=Doku (ambiguity) type='@NUM'
	 *     doku=Doku (ambiguity) type='@STRING'
	 *     doku=Doku (ambiguity) type='@URL'
	 */
	protected void emit_CSSType_WSTerminalRuleCall_3_0_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     type='@INT' (ambiguity) (rule end)
	 */
	protected void emit_CSSType_WSTerminalRuleCall_3_1_0_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     type='@NUM' (ambiguity) (rule end)
	 */
	protected void emit_CSSType_WSTerminalRuleCall_3_1_1_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     type='@STRING' (ambiguity) (rule end)
	 */
	protected void emit_CSSType_WSTerminalRuleCall_3_1_2_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     type='@URL' (ambiguity) (rule end)
	 */
	protected void emit_CSSType_WSTerminalRuleCall_3_1_3_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     doku=Doku (ambiguity) 'package' name=QualifiedName
	 */
	protected void emit_PackageDefinition_WSTerminalRuleCall_0_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
