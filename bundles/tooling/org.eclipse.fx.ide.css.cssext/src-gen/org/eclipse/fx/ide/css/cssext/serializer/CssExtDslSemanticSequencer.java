/*
 * generated by Xtext 2.9.0
 */
package org.eclipse.fx.ide.css.cssext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.fx.ide.css.cssext.cssExtDsl.CSSDefaultValue;
import org.eclipse.fx.ide.css.cssext.cssExtDsl.CSSNumLiteral;
import org.eclipse.fx.ide.css.cssext.cssExtDsl.CSSPropertyRef;
import org.eclipse.fx.ide.css.cssext.cssExtDsl.CSSRangedDoubleType;
import org.eclipse.fx.ide.css.cssext.cssExtDsl.CSSRangedIntType;
import org.eclipse.fx.ide.css.cssext.cssExtDsl.CSSRuleBracket;
import org.eclipse.fx.ide.css.cssext.cssExtDsl.CSSRuleConcat;
import org.eclipse.fx.ide.css.cssext.cssExtDsl.CSSRuleConcatWithoutSpace;
import org.eclipse.fx.ide.css.cssext.cssExtDsl.CSSRuleDefinition;
import org.eclipse.fx.ide.css.cssext.cssExtDsl.CSSRuleFunc;
import org.eclipse.fx.ide.css.cssext.cssExtDsl.CSSRuleLiteral;
import org.eclipse.fx.ide.css.cssext.cssExtDsl.CSSRuleOr;
import org.eclipse.fx.ide.css.cssext.cssExtDsl.CSSRulePostfix;
import org.eclipse.fx.ide.css.cssext.cssExtDsl.CSSRuleRef;
import org.eclipse.fx.ide.css.cssext.cssExtDsl.CSSRuleRegex;
import org.eclipse.fx.ide.css.cssext.cssExtDsl.CSSRuleSymbol;
import org.eclipse.fx.ide.css.cssext.cssExtDsl.CSSRuleXor;
import org.eclipse.fx.ide.css.cssext.cssExtDsl.CSSType;
import org.eclipse.fx.ide.css.cssext.cssExtDsl.CssExtDslPackage;
import org.eclipse.fx.ide.css.cssext.cssExtDsl.CssExtension;
import org.eclipse.fx.ide.css.cssext.cssExtDsl.Doku;
import org.eclipse.fx.ide.css.cssext.cssExtDsl.ElementDefinition;
import org.eclipse.fx.ide.css.cssext.cssExtDsl.Import;
import org.eclipse.fx.ide.css.cssext.cssExtDsl.PackageDefinition;
import org.eclipse.fx.ide.css.cssext.cssExtDsl.PropertyDefinition;
import org.eclipse.fx.ide.css.cssext.cssExtDsl.PseudoClassDefinition;
import org.eclipse.fx.ide.css.cssext.cssExtDsl.Substructure;
import org.eclipse.fx.ide.css.cssext.cssExtDsl.SubstructureSelector;
import org.eclipse.fx.ide.css.cssext.cssExtDsl.SubstructureStyleclass;
import org.eclipse.fx.ide.css.cssext.services.CssExtDslGrammarAccess;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class CssExtDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CssExtDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CssExtDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CssExtDslPackage.CSS_DEFAULT_VALUE:
				sequence_CSSDefaultValue(context, (CSSDefaultValue) semanticObject); 
				return; 
			case CssExtDslPackage.CSS_NUM_LITERAL:
				sequence_CSSRulePrimary(context, (CSSNumLiteral) semanticObject); 
				return; 
			case CssExtDslPackage.CSS_PROPERTY_REF:
				sequence_CSSType(context, (CSSPropertyRef) semanticObject); 
				return; 
			case CssExtDslPackage.CSS_RANGED_DOUBLE_TYPE:
				sequence_CSSType(context, (CSSRangedDoubleType) semanticObject); 
				return; 
			case CssExtDslPackage.CSS_RANGED_INT_TYPE:
				sequence_CSSType(context, (CSSRangedIntType) semanticObject); 
				return; 
			case CssExtDslPackage.CSS_RULE_BRACKET:
				sequence_CSSRuleBracket(context, (CSSRuleBracket) semanticObject); 
				return; 
			case CssExtDslPackage.CSS_RULE_CONCAT:
				sequence_CSSRuleConcat(context, (CSSRuleConcat) semanticObject); 
				return; 
			case CssExtDslPackage.CSS_RULE_CONCAT_WITHOUT_SPACE:
				sequence_CSSRuleConcatWithoutSpace(context, (CSSRuleConcatWithoutSpace) semanticObject); 
				return; 
			case CssExtDslPackage.CSS_RULE_DEFINITION:
				sequence_CSSRuleDefinition(context, (CSSRuleDefinition) semanticObject); 
				return; 
			case CssExtDslPackage.CSS_RULE_FUNC:
				sequence_CSSRuleFunc(context, (CSSRuleFunc) semanticObject); 
				return; 
			case CssExtDslPackage.CSS_RULE_LITERAL:
				sequence_CSSRuleLiteral(context, (CSSRuleLiteral) semanticObject); 
				return; 
			case CssExtDslPackage.CSS_RULE_OR:
				sequence_CSSRuleOr(context, (CSSRuleOr) semanticObject); 
				return; 
			case CssExtDslPackage.CSS_RULE_POSTFIX:
				sequence_CSSRulePostfix(context, (CSSRulePostfix) semanticObject); 
				return; 
			case CssExtDslPackage.CSS_RULE_REF:
				sequence_CSSRuleRef(context, (CSSRuleRef) semanticObject); 
				return; 
			case CssExtDslPackage.CSS_RULE_REGEX:
				sequence_CSSRuleRegex(context, (CSSRuleRegex) semanticObject); 
				return; 
			case CssExtDslPackage.CSS_RULE_SYMBOL:
				sequence_CSSRuleSymbol(context, (CSSRuleSymbol) semanticObject); 
				return; 
			case CssExtDslPackage.CSS_RULE_XOR:
				sequence_CSSRuleXor(context, (CSSRuleXor) semanticObject); 
				return; 
			case CssExtDslPackage.CSS_TYPE:
				sequence_CSSType(context, (CSSType) semanticObject); 
				return; 
			case CssExtDslPackage.CSS_EXTENSION:
				sequence_CssExtension(context, (CssExtension) semanticObject); 
				return; 
			case CssExtDslPackage.DOKU:
				sequence_Doku(context, (Doku) semanticObject); 
				return; 
			case CssExtDslPackage.ELEMENT_DEFINITION:
				sequence_ElementDefinition(context, (ElementDefinition) semanticObject); 
				return; 
			case CssExtDslPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case CssExtDslPackage.PACKAGE_DEFINITION:
				sequence_PackageDefinition(context, (PackageDefinition) semanticObject); 
				return; 
			case CssExtDslPackage.PROPERTY_DEFINITION:
				sequence_PropertyDefinition(context, (PropertyDefinition) semanticObject); 
				return; 
			case CssExtDslPackage.PSEUDO_CLASS_DEFINITION:
				sequence_PseudoClassDefinition(context, (PseudoClassDefinition) semanticObject); 
				return; 
			case CssExtDslPackage.SUBSTRUCTURE:
				sequence_Substructure(context, (Substructure) semanticObject); 
				return; 
			case CssExtDslPackage.SUBSTRUCTURE_SELECTOR:
				sequence_SubstructureSelector(context, (SubstructureSelector) semanticObject); 
				return; 
			case CssExtDslPackage.SUBSTRUCTURE_STYLECLASS:
				sequence_SubstructureStyleclass(context, (SubstructureStyleclass) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     CSSDefaultValue returns CSSDefaultValue
	 *
	 * Constraint:
	 *     (val=CSSRuleLiteral | ival=INT | dval=DOUBLE | sval=STRING)
	 */
	protected void sequence_CSSDefaultValue(ISerializationContext context, CSSDefaultValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CSSRuleOr returns CSSRuleBracket
	 *     CSSRuleOr.CSSRuleOr_1_0 returns CSSRuleBracket
	 *     CSSRuleXor returns CSSRuleBracket
	 *     CSSRuleXor.CSSRuleXor_1_0 returns CSSRuleBracket
	 *     CSSRuleConcat returns CSSRuleBracket
	 *     CSSRuleConcat.CSSRuleConcat_1_0 returns CSSRuleBracket
	 *     CSSRuleConcatWithoutSpace returns CSSRuleBracket
	 *     CSSRuleConcatWithoutSpace.CSSRuleConcatWithoutSpace_1_0 returns CSSRuleBracket
	 *     CSSRulePostfix returns CSSRuleBracket
	 *     CSSRulePostfix.CSSRulePostfix_1_0 returns CSSRuleBracket
	 *     CSSRuleBracket returns CSSRuleBracket
	 *     CSSRulePrimary returns CSSRuleBracket
	 *
	 * Constraint:
	 *     inner=CSSRuleOr
	 */
	protected void sequence_CSSRuleBracket(ISerializationContext context, CSSRuleBracket semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CssExtDslPackage.Literals.CSS_RULE_BRACKET__INNER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CssExtDslPackage.Literals.CSS_RULE_BRACKET__INNER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCSSRuleBracketAccess().getInnerCSSRuleOrParserRuleCall_2_0(), semanticObject.getInner());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CSSRuleOr returns CSSRuleConcatWithoutSpace
	 *     CSSRuleOr.CSSRuleOr_1_0 returns CSSRuleConcatWithoutSpace
	 *     CSSRuleXor returns CSSRuleConcatWithoutSpace
	 *     CSSRuleXor.CSSRuleXor_1_0 returns CSSRuleConcatWithoutSpace
	 *     CSSRuleConcat returns CSSRuleConcatWithoutSpace
	 *     CSSRuleConcat.CSSRuleConcat_1_0 returns CSSRuleConcatWithoutSpace
	 *     CSSRuleConcatWithoutSpace returns CSSRuleConcatWithoutSpace
	 *
	 * Constraint:
	 *     (conc+=CSSRuleConcatWithoutSpace_CSSRuleConcatWithoutSpace_1_0 conc+=CSSRulePostfix+)
	 */
	protected void sequence_CSSRuleConcatWithoutSpace(ISerializationContext context, CSSRuleConcatWithoutSpace semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CSSRuleOr returns CSSRuleConcat
	 *     CSSRuleOr.CSSRuleOr_1_0 returns CSSRuleConcat
	 *     CSSRuleXor returns CSSRuleConcat
	 *     CSSRuleXor.CSSRuleXor_1_0 returns CSSRuleConcat
	 *     CSSRuleConcat returns CSSRuleConcat
	 *
	 * Constraint:
	 *     (conc+=CSSRuleConcat_CSSRuleConcat_1_0 conc+=CSSRuleConcatWithoutSpace+)
	 */
	protected void sequence_CSSRuleConcat(ISerializationContext context, CSSRuleConcat semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CSSRuleDefinition returns CSSRuleDefinition
	 *
	 * Constraint:
	 *     (doku=Doku? name=QualifiedName (rule=CSSRuleOr | func=CSSRuleFunc))
	 */
	protected void sequence_CSSRuleDefinition(ISerializationContext context, CSSRuleDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CSSRuleFunc returns CSSRuleFunc
	 *
	 * Constraint:
	 *     (name=ValidID params=CSSRuleOr)
	 */
	protected void sequence_CSSRuleFunc(ISerializationContext context, CSSRuleFunc semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CssExtDslPackage.Literals.CSS_RULE_FUNC__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CssExtDslPackage.Literals.CSS_RULE_FUNC__NAME));
			if (transientValues.isValueTransient(semanticObject, CssExtDslPackage.Literals.CSS_RULE_FUNC__PARAMS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CssExtDslPackage.Literals.CSS_RULE_FUNC__PARAMS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCSSRuleFuncAccess().getNameValidIDParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCSSRuleFuncAccess().getParamsCSSRuleOrParserRuleCall_4_0(), semanticObject.getParams());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CSSRuleOr returns CSSRuleLiteral
	 *     CSSRuleOr.CSSRuleOr_1_0 returns CSSRuleLiteral
	 *     CSSRuleXor returns CSSRuleLiteral
	 *     CSSRuleXor.CSSRuleXor_1_0 returns CSSRuleLiteral
	 *     CSSRuleConcat returns CSSRuleLiteral
	 *     CSSRuleConcat.CSSRuleConcat_1_0 returns CSSRuleLiteral
	 *     CSSRuleConcatWithoutSpace returns CSSRuleLiteral
	 *     CSSRuleConcatWithoutSpace.CSSRuleConcatWithoutSpace_1_0 returns CSSRuleLiteral
	 *     CSSRulePostfix returns CSSRuleLiteral
	 *     CSSRulePostfix.CSSRulePostfix_1_0 returns CSSRuleLiteral
	 *     CSSRulePrimary returns CSSRuleLiteral
	 *     CSSRuleLiteral returns CSSRuleLiteral
	 *
	 * Constraint:
	 *     (doku=Doku? value=ID)
	 */
	protected void sequence_CSSRuleLiteral(ISerializationContext context, CSSRuleLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CSSRuleOr returns CSSRuleOr
	 *
	 * Constraint:
	 *     (ors+=CSSRuleOr_CSSRuleOr_1_0 ors+=CSSRuleXor+)
	 */
	protected void sequence_CSSRuleOr(ISerializationContext context, CSSRuleOr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CSSRuleOr returns CSSRulePostfix
	 *     CSSRuleOr.CSSRuleOr_1_0 returns CSSRulePostfix
	 *     CSSRuleXor returns CSSRulePostfix
	 *     CSSRuleXor.CSSRuleXor_1_0 returns CSSRulePostfix
	 *     CSSRuleConcat returns CSSRulePostfix
	 *     CSSRuleConcat.CSSRuleConcat_1_0 returns CSSRulePostfix
	 *     CSSRuleConcatWithoutSpace returns CSSRulePostfix
	 *     CSSRuleConcatWithoutSpace.CSSRuleConcatWithoutSpace_1_0 returns CSSRulePostfix
	 *     CSSRulePostfix returns CSSRulePostfix
	 *
	 * Constraint:
	 *     (rule=CSSRulePostfix_CSSRulePostfix_1_0 (cardinality='*' | cardinality='+' | cardinality='?'))
	 */
	protected void sequence_CSSRulePostfix(ISerializationContext context, CSSRulePostfix semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CSSRuleOr returns CSSNumLiteral
	 *     CSSRuleOr.CSSRuleOr_1_0 returns CSSNumLiteral
	 *     CSSRuleXor returns CSSNumLiteral
	 *     CSSRuleXor.CSSRuleXor_1_0 returns CSSNumLiteral
	 *     CSSRuleConcat returns CSSNumLiteral
	 *     CSSRuleConcat.CSSRuleConcat_1_0 returns CSSNumLiteral
	 *     CSSRuleConcatWithoutSpace returns CSSNumLiteral
	 *     CSSRuleConcatWithoutSpace.CSSRuleConcatWithoutSpace_1_0 returns CSSNumLiteral
	 *     CSSRulePostfix returns CSSNumLiteral
	 *     CSSRulePostfix.CSSRulePostfix_1_0 returns CSSNumLiteral
	 *     CSSRulePrimary returns CSSNumLiteral
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_CSSRulePrimary(ISerializationContext context, CSSNumLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CssExtDslPackage.Literals.CSS_NUM_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CssExtDslPackage.Literals.CSS_NUM_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCSSRulePrimaryAccess().getValueINTTerminalRuleCall_6_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CSSRuleRef returns CSSRuleRef
	 *     CSSRuleOr returns CSSRuleRef
	 *     CSSRuleOr.CSSRuleOr_1_0 returns CSSRuleRef
	 *     CSSRuleXor returns CSSRuleRef
	 *     CSSRuleXor.CSSRuleXor_1_0 returns CSSRuleRef
	 *     CSSRuleConcat returns CSSRuleRef
	 *     CSSRuleConcat.CSSRuleConcat_1_0 returns CSSRuleRef
	 *     CSSRuleConcatWithoutSpace returns CSSRuleRef
	 *     CSSRuleConcatWithoutSpace.CSSRuleConcatWithoutSpace_1_0 returns CSSRuleRef
	 *     CSSRulePostfix returns CSSRuleRef
	 *     CSSRulePostfix.CSSRulePostfix_1_0 returns CSSRuleRef
	 *     CSSRulePrimary returns CSSRuleRef
	 *
	 * Constraint:
	 *     (doku=Doku? ref=[Definition|QualifiedName])
	 */
	protected void sequence_CSSRuleRef(ISerializationContext context, CSSRuleRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CSSRuleOr returns CSSRuleRegex
	 *     CSSRuleOr.CSSRuleOr_1_0 returns CSSRuleRegex
	 *     CSSRuleXor returns CSSRuleRegex
	 *     CSSRuleXor.CSSRuleXor_1_0 returns CSSRuleRegex
	 *     CSSRuleConcat returns CSSRuleRegex
	 *     CSSRuleConcat.CSSRuleConcat_1_0 returns CSSRuleRegex
	 *     CSSRuleConcatWithoutSpace returns CSSRuleRegex
	 *     CSSRuleConcatWithoutSpace.CSSRuleConcatWithoutSpace_1_0 returns CSSRuleRegex
	 *     CSSRulePostfix returns CSSRuleRegex
	 *     CSSRulePostfix.CSSRulePostfix_1_0 returns CSSRuleRegex
	 *     CSSRulePrimary returns CSSRuleRegex
	 *     CSSRuleRegex returns CSSRuleRegex
	 *
	 * Constraint:
	 *     regex=REGEX
	 */
	protected void sequence_CSSRuleRegex(ISerializationContext context, CSSRuleRegex semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CssExtDslPackage.Literals.CSS_RULE_REGEX__REGEX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CssExtDslPackage.Literals.CSS_RULE_REGEX__REGEX));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCSSRuleRegexAccess().getRegexREGEXTerminalRuleCall_1_0(), semanticObject.getRegex());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CSSRuleOr returns CSSRuleSymbol
	 *     CSSRuleOr.CSSRuleOr_1_0 returns CSSRuleSymbol
	 *     CSSRuleXor returns CSSRuleSymbol
	 *     CSSRuleXor.CSSRuleXor_1_0 returns CSSRuleSymbol
	 *     CSSRuleConcat returns CSSRuleSymbol
	 *     CSSRuleConcat.CSSRuleConcat_1_0 returns CSSRuleSymbol
	 *     CSSRuleConcatWithoutSpace returns CSSRuleSymbol
	 *     CSSRuleConcatWithoutSpace.CSSRuleConcatWithoutSpace_1_0 returns CSSRuleSymbol
	 *     CSSRulePostfix returns CSSRuleSymbol
	 *     CSSRulePostfix.CSSRulePostfix_1_0 returns CSSRuleSymbol
	 *     CSSRulePrimary returns CSSRuleSymbol
	 *     CSSRuleSymbol returns CSSRuleSymbol
	 *
	 * Constraint:
	 *     (doku=Doku? (symbol=',' | symbol='%'))
	 */
	protected void sequence_CSSRuleSymbol(ISerializationContext context, CSSRuleSymbol semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CSSRuleOr returns CSSRuleXor
	 *     CSSRuleOr.CSSRuleOr_1_0 returns CSSRuleXor
	 *     CSSRuleXor returns CSSRuleXor
	 *
	 * Constraint:
	 *     (xors+=CSSRuleXor_CSSRuleXor_1_0 xors+=CSSRuleConcat+)
	 */
	protected void sequence_CSSRuleXor(ISerializationContext context, CSSRuleXor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CSSBaseType returns CSSPropertyRef
	 *     CSSType returns CSSPropertyRef
	 *     CSSRuleOr returns CSSPropertyRef
	 *     CSSRuleOr.CSSRuleOr_1_0 returns CSSPropertyRef
	 *     CSSRuleXor returns CSSPropertyRef
	 *     CSSRuleXor.CSSRuleXor_1_0 returns CSSPropertyRef
	 *     CSSRuleConcat returns CSSPropertyRef
	 *     CSSRuleConcat.CSSRuleConcat_1_0 returns CSSPropertyRef
	 *     CSSRuleConcatWithoutSpace returns CSSPropertyRef
	 *     CSSRuleConcatWithoutSpace.CSSRuleConcatWithoutSpace_1_0 returns CSSPropertyRef
	 *     CSSRulePostfix returns CSSPropertyRef
	 *     CSSRulePostfix.CSSRulePostfix_1_0 returns CSSPropertyRef
	 *     CSSRulePrimary returns CSSPropertyRef
	 *
	 * Constraint:
	 *     (doku=Doku? type='@PROPERTY_REF' rule=CSSRuleRef)
	 */
	protected void sequence_CSSType(ISerializationContext context, CSSPropertyRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CSSBaseType returns CSSRangedDoubleType
	 *     CSSType returns CSSRangedDoubleType
	 *     CSSRuleOr returns CSSRangedDoubleType
	 *     CSSRuleOr.CSSRuleOr_1_0 returns CSSRangedDoubleType
	 *     CSSRuleXor returns CSSRangedDoubleType
	 *     CSSRuleXor.CSSRuleXor_1_0 returns CSSRangedDoubleType
	 *     CSSRuleConcat returns CSSRangedDoubleType
	 *     CSSRuleConcat.CSSRuleConcat_1_0 returns CSSRangedDoubleType
	 *     CSSRuleConcatWithoutSpace returns CSSRangedDoubleType
	 *     CSSRuleConcatWithoutSpace.CSSRuleConcatWithoutSpace_1_0 returns CSSRangedDoubleType
	 *     CSSRulePostfix returns CSSRangedDoubleType
	 *     CSSRulePostfix.CSSRulePostfix_1_0 returns CSSRangedDoubleType
	 *     CSSRulePrimary returns CSSRangedDoubleType
	 *
	 * Constraint:
	 *     (doku=Doku? type='@NUM' from=DOUBLE to=DOUBLE)
	 */
	protected void sequence_CSSType(ISerializationContext context, CSSRangedDoubleType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CSSBaseType returns CSSRangedIntType
	 *     CSSType returns CSSRangedIntType
	 *     CSSRuleOr returns CSSRangedIntType
	 *     CSSRuleOr.CSSRuleOr_1_0 returns CSSRangedIntType
	 *     CSSRuleXor returns CSSRangedIntType
	 *     CSSRuleXor.CSSRuleXor_1_0 returns CSSRangedIntType
	 *     CSSRuleConcat returns CSSRangedIntType
	 *     CSSRuleConcat.CSSRuleConcat_1_0 returns CSSRangedIntType
	 *     CSSRuleConcatWithoutSpace returns CSSRangedIntType
	 *     CSSRuleConcatWithoutSpace.CSSRuleConcatWithoutSpace_1_0 returns CSSRangedIntType
	 *     CSSRulePostfix returns CSSRangedIntType
	 *     CSSRulePostfix.CSSRulePostfix_1_0 returns CSSRangedIntType
	 *     CSSRulePrimary returns CSSRangedIntType
	 *
	 * Constraint:
	 *     (doku=Doku? type='@INT' from=INT to=INT)
	 */
	protected void sequence_CSSType(ISerializationContext context, CSSRangedIntType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CSSBaseType returns CSSType
	 *     CSSType returns CSSType
	 *     CSSRuleOr returns CSSType
	 *     CSSRuleOr.CSSRuleOr_1_0 returns CSSType
	 *     CSSRuleXor returns CSSType
	 *     CSSRuleXor.CSSRuleXor_1_0 returns CSSType
	 *     CSSRuleConcat returns CSSType
	 *     CSSRuleConcat.CSSRuleConcat_1_0 returns CSSType
	 *     CSSRuleConcatWithoutSpace returns CSSType
	 *     CSSRuleConcatWithoutSpace.CSSRuleConcatWithoutSpace_1_0 returns CSSType
	 *     CSSRulePostfix returns CSSType
	 *     CSSRulePostfix.CSSRulePostfix_1_0 returns CSSType
	 *     CSSRulePrimary returns CSSType
	 *
	 * Constraint:
	 *     (doku=Doku? (type='@INT' | type='@NUM' | type='@STRING' | type='@URL'))
	 */
	protected void sequence_CSSType(ISerializationContext context, CSSType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CssExtension returns CssExtension
	 *
	 * Constraint:
	 *     (namespace=STRING imports+=Import* packageDef=PackageDefinition?)
	 */
	protected void sequence_CssExtension(ISerializationContext context, CssExtension semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Doku returns Doku
	 *
	 * Constraint:
	 *     content=JDOC
	 */
	protected void sequence_Doku(ISerializationContext context, Doku semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CssExtDslPackage.Literals.DOKU__CONTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CssExtDslPackage.Literals.DOKU__CONTENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDokuAccess().getContentJDOCTerminalRuleCall_0(), semanticObject.getContent());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ElementDefinition returns ElementDefinition
	 *
	 * Constraint:
	 *     (
	 *         doku=Doku? 
	 *         name=QualifiedName 
	 *         (super+=[ElementDefinition|QualifiedName] super+=[ElementDefinition|QualifiedName]*)? 
	 *         styleclass=ID? 
	 *         (properties+=PropertyDefinition | pseudoClasses+=PseudoClassDefinition | substructures+=Substructure)*
	 *     )
	 */
	protected void sequence_ElementDefinition(ISerializationContext context, ElementDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Import returns Import
	 *
	 * Constraint:
	 *     importedNamespace=QualifiedNameWithWildCard
	 */
	protected void sequence_Import(ISerializationContext context, Import semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CssExtDslPackage.Literals.IMPORT__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CssExtDslPackage.Literals.IMPORT__IMPORTED_NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PackageDefinition returns PackageDefinition
	 *
	 * Constraint:
	 *     (doku=Doku? name=QualifiedName (rules+=CSSRuleDefinition | subpackages+=PackageDefinition | elements+=ElementDefinition)*)
	 */
	protected void sequence_PackageDefinition(ISerializationContext context, PackageDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PropertyDefinition returns PropertyDefinition
	 *
	 * Constraint:
	 *     (doku=Doku? name=QualifiedName rule=CSSRuleOr default=CSSDefaultValue?)
	 */
	protected void sequence_PropertyDefinition(ISerializationContext context, PropertyDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PseudoClassDefinition returns PseudoClassDefinition
	 *
	 * Constraint:
	 *     (doku=Doku? name=PSEUDO)
	 */
	protected void sequence_PseudoClassDefinition(ISerializationContext context, PseudoClassDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SubstructureSelector returns SubstructureSelector
	 *
	 * Constraint:
	 *     (selectorName=ID var=ID?)
	 */
	protected void sequence_SubstructureSelector(ISerializationContext context, SubstructureSelector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SubstructureStyleclass returns SubstructureStyleclass
	 *
	 * Constraint:
	 *     (doku=Doku? element=[ElementDefinition|QualifiedName] selectors+=SubstructureSelector+ childs+=SubstructureStyleclass*)
	 */
	protected void sequence_SubstructureStyleclass(ISerializationContext context, SubstructureStyleclass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Substructure returns Substructure
	 *
	 * Constraint:
	 *     (doku=Doku? name=ID childs+=SubstructureStyleclass+)
	 */
	protected void sequence_Substructure(ISerializationContext context, Substructure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
