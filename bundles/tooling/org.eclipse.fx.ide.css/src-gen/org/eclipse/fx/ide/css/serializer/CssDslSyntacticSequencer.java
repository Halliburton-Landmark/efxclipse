/*
 * generated by Xtext 2.9.0
 */
package org.eclipse.fx.ide.css.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.fx.ide.css.services.CssDslGrammarAccess;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class CssDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected CssDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_CssDeclaration_WSTerminalRuleCall_1_a;
	protected AbstractElementAlias match_FontFaceRule_SemicolonKeyword_4_0_a;
	protected AbstractElementAlias match_FontFaceRule_SemicolonKeyword_4_0_p;
	protected AbstractElementAlias match_KeyframeSelector_SemicolonKeyword_3_0_a;
	protected AbstractElementAlias match_KeyframeSelector_SemicolonKeyword_3_0_p;
	protected AbstractElementAlias match_KeyframesRule_SemicolonKeyword_5_0_a;
	protected AbstractElementAlias match_KeyframesRule_SemicolonKeyword_5_0_p;
	protected AbstractElementAlias match_PageRule_SemicolonKeyword_5_0_a;
	protected AbstractElementAlias match_PageRule_SemicolonKeyword_5_0_p;
	protected AbstractElementAlias match_PseudoClass_COLONTerminalRuleCall_1_q;
	protected AbstractElementAlias match_Ruleset_SemicolonKeyword_4_2_q;
	protected AbstractElementAlias match_Ruleset_WSTerminalRuleCall_1_0_a;
	protected AbstractElementAlias match_Ruleset_WSTerminalRuleCall_2_a;
	protected AbstractElementAlias match_Selector_WSTerminalRuleCall_1_0_1_a;
	protected AbstractElementAlias match_Selector_WSTerminalRuleCall_1_1_0_p;
	protected AbstractElementAlias match_Selector_WSTerminalRuleCall_1_1_1_1_a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (CssDslGrammarAccess) access;
		match_CssDeclaration_WSTerminalRuleCall_1_a = new TokenAlias(true, true, grammarAccess.getCssDeclarationAccess().getWSTerminalRuleCall_1());
		match_FontFaceRule_SemicolonKeyword_4_0_a = new TokenAlias(true, true, grammarAccess.getFontFaceRuleAccess().getSemicolonKeyword_4_0());
		match_FontFaceRule_SemicolonKeyword_4_0_p = new TokenAlias(true, false, grammarAccess.getFontFaceRuleAccess().getSemicolonKeyword_4_0());
		match_KeyframeSelector_SemicolonKeyword_3_0_a = new TokenAlias(true, true, grammarAccess.getKeyframeSelectorAccess().getSemicolonKeyword_3_0());
		match_KeyframeSelector_SemicolonKeyword_3_0_p = new TokenAlias(true, false, grammarAccess.getKeyframeSelectorAccess().getSemicolonKeyword_3_0());
		match_KeyframesRule_SemicolonKeyword_5_0_a = new TokenAlias(true, true, grammarAccess.getKeyframesRuleAccess().getSemicolonKeyword_5_0());
		match_KeyframesRule_SemicolonKeyword_5_0_p = new TokenAlias(true, false, grammarAccess.getKeyframesRuleAccess().getSemicolonKeyword_5_0());
		match_PageRule_SemicolonKeyword_5_0_a = new TokenAlias(true, true, grammarAccess.getPageRuleAccess().getSemicolonKeyword_5_0());
		match_PageRule_SemicolonKeyword_5_0_p = new TokenAlias(true, false, grammarAccess.getPageRuleAccess().getSemicolonKeyword_5_0());
		match_PseudoClass_COLONTerminalRuleCall_1_q = new TokenAlias(false, true, grammarAccess.getPseudoClassAccess().getCOLONTerminalRuleCall_1());
		match_Ruleset_SemicolonKeyword_4_2_q = new TokenAlias(false, true, grammarAccess.getRulesetAccess().getSemicolonKeyword_4_2());
		match_Ruleset_WSTerminalRuleCall_1_0_a = new TokenAlias(true, true, grammarAccess.getRulesetAccess().getWSTerminalRuleCall_1_0());
		match_Ruleset_WSTerminalRuleCall_2_a = new TokenAlias(true, true, grammarAccess.getRulesetAccess().getWSTerminalRuleCall_2());
		match_Selector_WSTerminalRuleCall_1_0_1_a = new TokenAlias(true, true, grammarAccess.getSelectorAccess().getWSTerminalRuleCall_1_0_1());
		match_Selector_WSTerminalRuleCall_1_1_0_p = new TokenAlias(true, false, grammarAccess.getSelectorAccess().getWSTerminalRuleCall_1_1_0());
		match_Selector_WSTerminalRuleCall_1_1_1_1_a = new TokenAlias(true, true, grammarAccess.getSelectorAccess().getWSTerminalRuleCall_1_1_1_1());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getCOLONRule())
			return getCOLONToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCOMMARule())
			return getCOMMAToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getHASHMARKRule())
			return getHASHMARKToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIMPORTANT_SYMRule())
			return getIMPORTANT_SYMToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNotFunctionCallRule())
			return getNotFunctionCallToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPERCENTRule())
			return getPERCENTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getWSRule())
			return getWSToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal COLON: ':';
	 */
	protected String getCOLONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ":";
	}
	
	/**
	 * terminal COMMA: ',';
	 */
	protected String getCOMMAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ",";
	}
	
	/**
	 * terminal HASHMARK: '#';
	 */
	protected String getHASHMARKToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "#";
	}
	
	/**
	 * terminal IMPORTANT_SYM:
	 * 	'!important'
	 * ;
	 */
	protected String getIMPORTANT_SYMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "!important";
	}
	
	/**
	 * NotFunctionCall hidden():
	 * 	COLON 'not('
	 * ;
	 */
	protected String getNotFunctionCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ":not(";
	}
	
	/**
	 * terminal PERCENT: '%';
	 */
	protected String getPERCENTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "%";
	}
	
	/**
	 * terminal WS			: (' '|'\t'|'\r'|'\n')+;
	 */
	protected String getWSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return " ";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_CssDeclaration_WSTerminalRuleCall_1_a.equals(syntax))
				emit_CssDeclaration_WSTerminalRuleCall_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FontFaceRule_SemicolonKeyword_4_0_a.equals(syntax))
				emit_FontFaceRule_SemicolonKeyword_4_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FontFaceRule_SemicolonKeyword_4_0_p.equals(syntax))
				emit_FontFaceRule_SemicolonKeyword_4_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_KeyframeSelector_SemicolonKeyword_3_0_a.equals(syntax))
				emit_KeyframeSelector_SemicolonKeyword_3_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_KeyframeSelector_SemicolonKeyword_3_0_p.equals(syntax))
				emit_KeyframeSelector_SemicolonKeyword_3_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_KeyframesRule_SemicolonKeyword_5_0_a.equals(syntax))
				emit_KeyframesRule_SemicolonKeyword_5_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_KeyframesRule_SemicolonKeyword_5_0_p.equals(syntax))
				emit_KeyframesRule_SemicolonKeyword_5_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PageRule_SemicolonKeyword_5_0_a.equals(syntax))
				emit_PageRule_SemicolonKeyword_5_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PageRule_SemicolonKeyword_5_0_p.equals(syntax))
				emit_PageRule_SemicolonKeyword_5_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PseudoClass_COLONTerminalRuleCall_1_q.equals(syntax))
				emit_PseudoClass_COLONTerminalRuleCall_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Ruleset_SemicolonKeyword_4_2_q.equals(syntax))
				emit_Ruleset_SemicolonKeyword_4_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Ruleset_WSTerminalRuleCall_1_0_a.equals(syntax))
				emit_Ruleset_WSTerminalRuleCall_1_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Ruleset_WSTerminalRuleCall_2_a.equals(syntax))
				emit_Ruleset_WSTerminalRuleCall_2_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Selector_WSTerminalRuleCall_1_0_1_a.equals(syntax))
				emit_Selector_WSTerminalRuleCall_1_0_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Selector_WSTerminalRuleCall_1_1_0_p.equals(syntax))
				emit_Selector_WSTerminalRuleCall_1_1_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Selector_WSTerminalRuleCall_1_1_1_1_a.equals(syntax))
				emit_Selector_WSTerminalRuleCall_1_1_1_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     property=CssProperty (ambiguity) COLON valueTokens+=CssTok
	 */
	protected void emit_CssDeclaration_WSTerminalRuleCall_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '@font-face' '{' (ambiguity) '}' (rule start)
	 *     declarations+=CssDeclaration (ambiguity) '}' (rule end)
	 */
	protected void emit_FontFaceRule_SemicolonKeyword_4_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '@font-face' '{' (ambiguity) declarations+=CssDeclaration
	 *     declarations+=CssDeclaration (ambiguity) declarations+=CssDeclaration
	 */
	protected void emit_FontFaceRule_SemicolonKeyword_4_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'*
	 *
	 * This ambiguous syntax occurs at:
	 *     declarations+=CssDeclaration (ambiguity) '}' (rule end)
	 *     percentage=Num PERCENT '{' (ambiguity) '}' (rule end)
	 *     type=Identifier '{' (ambiguity) '}' (rule end)
	 */
	protected void emit_KeyframeSelector_SemicolonKeyword_3_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'+
	 *
	 * This ambiguous syntax occurs at:
	 *     declarations+=CssDeclaration (ambiguity) declarations+=CssDeclaration
	 *     percentage=Num PERCENT '{' (ambiguity) declarations+=CssDeclaration
	 *     type=Identifier '{' (ambiguity) declarations+=CssDeclaration
	 */
	protected void emit_KeyframeSelector_SemicolonKeyword_3_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'*
	 *
	 * This ambiguous syntax occurs at:
	 *     keyframeselectors+=KeyframeSelector (ambiguity) '}' (rule end)
	 *     name=Identifier '{' (ambiguity) '}' (rule end)
	 */
	protected void emit_KeyframesRule_SemicolonKeyword_5_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'+
	 *
	 * This ambiguous syntax occurs at:
	 *     keyframeselectors+=KeyframeSelector (ambiguity) keyframeselectors+=KeyframeSelector
	 *     name=Identifier '{' (ambiguity) keyframeselectors+=KeyframeSelector
	 */
	protected void emit_KeyframesRule_SemicolonKeyword_5_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '@page' '{' (ambiguity) '}' (rule start)
	 *     declarations+=CssDeclaration (ambiguity) '}' (rule end)
	 *     pseudoPage=PseudoPage '{' (ambiguity) '}' (rule end)
	 */
	protected void emit_PageRule_SemicolonKeyword_5_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '@page' '{' (ambiguity) declarations+=CssDeclaration
	 *     declarations+=CssDeclaration (ambiguity) declarations+=CssDeclaration
	 *     pseudoPage=PseudoPage '{' (ambiguity) declarations+=CssDeclaration
	 */
	protected void emit_PageRule_SemicolonKeyword_5_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     COLON?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) COLON (ambiguity) name=PseudoClassName
	 */
	protected void emit_PseudoClass_COLONTerminalRuleCall_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     declarations+=CssDeclaration (ambiguity) '}' (rule end)
	 */
	protected void emit_Ruleset_SemicolonKeyword_4_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     selectors+=Selector (ambiguity) COMMA selectors+=Selector
	 */
	protected void emit_Ruleset_WSTerminalRuleCall_1_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     selectors+=Selector (ambiguity) '{' '}' (rule end)
	 *     selectors+=Selector (ambiguity) '{' declarations+=CssDeclaration
	 */
	protected void emit_Ruleset_WSTerminalRuleCall_2_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     combinator=Combinator (ambiguity) selector=Selector
	 */
	protected void emit_Selector_WSTerminalRuleCall_1_0_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS+
	 *
	 * This ambiguous syntax occurs at:
	 *     simpleselectors+=SimpleSelector (ambiguity) combinator=Combinator
	 *     simpleselectors+=SimpleSelector (ambiguity) selector=Selector
	 */
	protected void emit_Selector_WSTerminalRuleCall_1_1_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     combinator=Combinator (ambiguity) selector=Selector
	 */
	protected void emit_Selector_WSTerminalRuleCall_1_1_1_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
