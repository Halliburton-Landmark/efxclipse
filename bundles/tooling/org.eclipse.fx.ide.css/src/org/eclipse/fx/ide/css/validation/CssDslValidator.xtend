/*
 * generated by Xtext 2.9.0
 */
package org.eclipse.fx.ide.css.validation

import com.google.inject.Inject
import java.util.Arrays
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.EObject
import org.eclipse.fx.ide.css.cssDsl.CssDeclaration
import org.eclipse.fx.ide.css.cssDsl.CssDslPackage
import org.eclipse.fx.ide.css.cssDsl.CssProperty
import org.eclipse.fx.ide.css.cssDsl.FontFaceRule
import org.eclipse.fx.ide.css.cssDsl.IdentifierTok
import org.eclipse.fx.ide.css.cssDsl.Ruleset
import org.eclipse.fx.ide.css.cssDsl.StringTok
import org.eclipse.fx.ide.css.cssDsl.SymbolTok
import org.eclipse.fx.ide.css.cssDsl.UrlTok
import org.eclipse.fx.ide.css.cssDsl.WSTok
import org.eclipse.fx.ide.css.extapi.CssExt
import org.eclipse.fx.ide.css.util.Util
import org.eclipse.xtext.nodemodel.util.NodeModelUtils
import org.eclipse.xtext.resource.XtextResource
import org.eclipse.xtext.validation.Check

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class CssDslValidator extends AbstractCssDslValidator {

	new() {
		println(this)
	}
	
	@Inject def blub(XtextResource res) {
		println("injected resource: " + res)
	}
	
	extension Util util = new Util()
	
	public static val PROPERTY_UNKNOWN = "property-unknown"
	public static val PROPERTY_UNSUPPORTED_BY_SELECTOR = "property-unsupported-by-selector"
	
	
	// TODO this information is fx specific, hence it should come from the fx cssext!!!
	static val PREDEFINED_VAR_PROPS = Arrays.asList(
			"-fx-base",							"-fx-background",				"-fx-control-inner-background",		"-fx-control-inner-background-alt",    //$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$//$NON-NLS-4$
			"-fx-dark-text-color",				"-fx-mid-text-color", 			"-fx-light-text-color", 			"-fx-accent", //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
			"-fx-default-button",				"-fx-focus-color",				"-fx-faint-focus-color",			"-fx-color",    //$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$//$NON-NLS-4$
			"CHART_COLOR_1",					"CHART_COLOR_2",				"CHART_COLOR_3",					"CHART_COLOR_4", //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
			"CHART_COLOR_5",					"CHART_COLOR_6",				"CHART_COLOR_7",					"CHART_COLOR_8",    //$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$//$NON-NLS-4$
			"CHART_COLOR_1_TRANS_20",			"CHART_COLOR_2_TRANS_20", 		"CHART_COLOR_3_TRANS_20", 			"CHART_COLOR_4_TRANS_20", //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
			"CHART_COLOR_5_TRANS_20",			"CHART_COLOR_6_TRANS_20",		"CHART_COLOR_7_TRANS_20",			"CHART_COLOR_8_TRANS_20",    //$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$//$NON-NLS-4$
			"CHART_COLOR_1_TRANS_70",			"CHART_COLOR_2_TRANS_70",		"CHART_COLOR_3_TRANS_70",			"CHART_COLOR_4_TRANS_70", //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
			"CHART_COLOR_5_TRANS_70",			"CHART_COLOR_6_TRANS_70",		"CHART_COLOR_7_TRANS_70",			"CHART_COLOR_8_TRANS_70",    //$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$//$NON-NLS-4$
			"-fx-hover-base",					"-fx-pressed-base",				"-fx-text-background-color",		"-fx-box-border", //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
			"-fx-text-box-border",				"-fx-shadow-highlight-color", 	"-fx-outer-border",					"-fx-inner-border",    //$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$//$NON-NLS-4$
			"-fx-inner-border-horizontal", 		"-fx-inner-border-bottomup", 	"-fx-body-color", 					"-fx-body-color-bottomup", //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
			"-fx-body-color-to-right",			"-fx-text-base-color", 			"-fx-text-inner-color",				"-fx-mark-color",    //$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$//$NON-NLS-4$
			"-fx-mark-highlight-color",			"-fx-selection-bar", 			"-fx-selection-bar-non-focused", 	"-fx-selection-bar-text", //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
			"-fx-cell-hover-color",				"-fx-cell-focus-inner-border", 	"-fx-cell-focus-inner-border", 		"-fx-page-bullet-border",   //$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$ //$NON-NLS-4$
			"-fx-page-indicator-hover-border", "-fx-focused-text-base-color", 	"-fx-focused-mark-color"  //$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$
	)
	
	@Inject(optional=true)
	var CssExt ext
	
	def doImport(CssDeclaration d) {
			val toks = d.valueTokens.filter[t|!(t instanceof WSTok)]
			if (toks.size == 1) {
				val data = toks.get(0)
				if (data instanceof StringTok) {
					try {
						var uri = URI.createURI(data.value);
						uri = uri.resolve(d.eResource.URI);
						System.err.println("import " + uri)
						val r = d.eResource.resourceSet.getResource(uri, true)
						if (r instanceof XtextResource && r.contents.size == 1 && "CssExtensionImpl".equals(r.contents.get(0).class.simpleName)) {
							// ok
						}
						else {
							System.err.println("r is null!")
							error("Import not found!", d, CssDslPackage.Literals.CSS_DECLARATION__VALUE_TOKENS, d.valueTokens.indexOf(data));
						}
					}
					catch (Throwable e) {
						e.printStackTrace
						error("Import not found!",  d, CssDslPackage.Literals.CSS_DECLARATION__VALUE_TOKENS, d.valueTokens.indexOf(data));
					}
				}
			}
	}
	
	
	def isSuppressWarnings(EObject obj) {
		// TODO ensure that the right comment is checked
		NodeModelUtils.getNode(obj).getText().contains("@SuppressWarning");
	}
	
//	@Check(NORMAL)
//	def checkPropertyName(CssProperty prop) {
//		val now = System.currentTimeMillis
//		
//		val dec = prop.eContainer as CssDeclaration
//		
//		val allKnownProperties = (ext.getPropertyProposalsForSelector(prop, null).map[p|p.proposal] + PREDEFINED_VAR_PROPS).toSet;
//		System.err.println(allKnownProperties)
//		if (!allKnownProperties.contains(prop.name)) {
//			if (!dec.isSuppressWarnings) {
//				println("warn @ ")
//				warning('''X01 Unknown property: "«prop.getName()»"''', prop, CssDslPackage.Literals.CSS_PROPERTY__NAME, PROPERTY_UNKNOWN);
//			}
//		}
//		
//		println('''checkPropertyName «prop.name» «System.currentTimeMillis - now»''')
//	}
	
//	@Check(NORMAL)
//	def checkUnknownProperties(Stylesheet s) {
//		if (true) return;
//		val now = System.currentTimeMillis
//		val allKnownProperties = (ext.getPropertyProposalsForSelector(s.eResource as XtextResource, s, null).map[p|p.proposal] + PREDEFINED_VAR_PROPS).toSet;
//		System.err.println(allKnownProperties)
//		s.eAllContents.filter[x|x instanceof CssDeclaration].map[x|x as CssDeclaration].filter[dec| allKnownProperties.contains(dec.property.name)].forEach[dec|
//			if (!dec.isSuppressWarnings) {
//				warning('''Unknown property: "«dec.property.getName()»"''', dec.property, CssDslPackage.Literals.CSS_PROPERTY__NAME, PROPERTY_UNKNOWN);
//			}
//		]
//		
//		println('''checkUnknownProperties «System.currentTimeMillis - now»''')
//	}
	
	@Check(NORMAL)
	def checkFontFaceProperties(FontFaceRule f) {
		if (true) return;
		val now = System.currentTimeMillis
		f.declarations.forEach[dec|
			val property = dec.property
			val tokensWithoutWS = dec.getValueTokens().filter[t|!(t instanceof WSTok)]
			
			if ( "font-family".equals(property.name) ) {
				if ( tokensWithoutWS.size != 1 ) {
					error("Font family has to define a name", dec, CssDslPackage.Literals.CSS_DECLARATION__VALUE_TOKENS)
				}
				else {
					if (! (tokensWithoutWS.get(0) instanceof IdentifierTok)) {
						val tok = tokensWithoutWS.get(0)
						error("Invalid font family name", dec, CssDslPackage.Literals.CSS_DECLARATION__VALUE_TOKENS, dec.getValueTokens().indexOf(tok))
					} 
				}
			} else if( "src".equals(property.name) ) {
				if( tokensWithoutWS.size == 0 ) {
					error("At least one URL is required", dec, CssDslPackage.Literals.CSS_DECLARATION__VALUE_TOKENS);
				} else {
					tokensWithoutWS.filter[t|!(t instanceof SymbolTok)].filter[t|!(t instanceof UrlTok)].forEach[t|
						error("Only url-values are allowed", dec, CssDslPackage.Literals.CSS_DECLARATION__VALUE_TOKENS,dec.getValueTokens().indexOf(t));
					]
				}
			} else if( "font-stretch".equals(property.getName()) ) {

			} else if( "font-style".equals(property.getName()) ) {

			} else if( "font-weight".equals(property.getName()) ) {

			} else if( "unicode-range".equals(property.getName()) ) {

			} else {
				warning("Unknown property: \""+property.getName()+"\"", property, CssDslPackage.Literals.CSS_PROPERTY__NAME);
			}
		]
		
		println('''checkFontFaceProperties «System.currentTimeMillis - now»''')
	}
	
	@Check(NORMAL)
	def checkPropertySupported(CssProperty p) {
		val dec = p.eContainer as CssDeclaration
		if (dec.eContainer instanceof Ruleset) {
			val ruleset = dec.eContainer as Ruleset
			if (!ext.isPropertyBySelectorSupported(p, ruleset.selectors, p)) {
				if (!p.isSuppressWarnings) {
					warning('''"«dec.property.name»" is not supported by the given selectors''', p, CssDslPackage.Literals.CSS_PROPERTY__NAME, PROPERTY_UNSUPPORTED_BY_SELECTOR);
				}
			}
		}
	}
	
	@Check(NORMAL)
	def checkPropertyKnown(CssProperty p) {
		if (p.eContainer.eContainer instanceof Ruleset) {
			if (!ext.isPropertyKnown(p, p)) {
				if (!p.isSuppressWarnings) {
					warning('''Unknown property: "«p.getName()»"''', p, CssDslPackage.Literals.CSS_PROPERTY__NAME, PROPERTY_UNKNOWN);
				}
			}
		}
	}
	
//	@Check(NORMAL)
//	def checkPropertySupported(Ruleset r) {
//		
//		if (ext.isPropertyBySelectorSupported(r, )
//			
//		)
//		
//		
//		if (false) return;
//		val now = System.currentTimeMillis
//		
//		val supportedProperties = (ext.getPropertyProposalsForSelector(r, r.selectors).map[p|p.proposal] + PREDEFINED_VAR_PROPS).toSet;
//		
//		val unsupportedProperties = r.declarations.filter[dec|!supportedProperties.contains(dec.property.name)]
//		
//		val rulesetSuppressWarnings = r.isSuppressWarnings
//		
//		unsupportedProperties.forEach[dec|
//			val suppressWarnings = rulesetSuppressWarnings || dec.isSuppressWarnings
//			if (!suppressWarnings) warning('''"«dec.property.name»" is not supported by the given selectors''', dec.property, CssDslPackage.Literals.CSS_PROPERTY__NAME, PROPERTY_UNSUPPORTED_BY_SELECTOR);
//		]
//		
//		println('''checkPropertySupported «System.currentTimeMillis - now»''')
//	}
	
	// TODO move known check up to ruleset, so we need only one call to ext api
	@Check
	def checkDeclaration(CssDeclaration dec) {
		if (true) return;
		println("checkDeclaration " + dec.property.name)
		
		

		if (isMetaDataBlock(dec)) {
			if ("import".equals(dec.property.name)) {
					doImport(dec)
			}
			else {
				warning("Not supported", dec.property, CssDslPackage.Literals.CSS_PROPERTY__NAME)
			}
			return
		}
		
		val property = dec.property
		val tokensWithoutWS = dec.getValueTokens().filter[t|!(t instanceof WSTok)]
		val suppressWarnings = NodeModelUtils.getNode(property).getText().contains("@SuppressWarning");
		
		// @FontFace checks
		if (dec.eContainer instanceof FontFaceRule) {
			if ( "font-family".equals(property.name) ) {
				if ( tokensWithoutWS.size != 1 ) {
					error("Font family has to define a name", dec, CssDslPackage.Literals.CSS_DECLARATION__VALUE_TOKENS)
				}
				else {
					if (! (tokensWithoutWS.get(0) instanceof IdentifierTok)) {
						val tok = tokensWithoutWS.get(0)
						error("Invalid font family name", dec, CssDslPackage.Literals.CSS_DECLARATION__VALUE_TOKENS, dec.getValueTokens().indexOf(tok))
					} 
				}
			} else if( "src".equals(property.name) ) {
				if( tokensWithoutWS.size == 0 ) {
					error("At least one URL is required", dec, CssDslPackage.Literals.CSS_DECLARATION__VALUE_TOKENS);
				} else {
					tokensWithoutWS.filter[t|!(t instanceof SymbolTok)].filter[t|!(t instanceof UrlTok)].forEach[t|
						error("Only url-values are allowed", dec, CssDslPackage.Literals.CSS_DECLARATION__VALUE_TOKENS,dec.getValueTokens().indexOf(t));
					]
				}
			} else if( "font-stretch".equals(property.getName()) ) {

			} else if( "font-style".equals(property.getName()) ) {

			} else if( "font-weight".equals(property.getName()) ) {

			} else if( "unicode-range".equals(property.getName()) ) {

			} else {
				warning("Unknown property: \""+property.getName()+"\"", property, CssDslPackage.Literals.CSS_PROPERTY__NAME);
			}

			return;
		}
		
		val properties = ext.getPropertyProposalsForSelector(dec, null);
		
		if (PREDEFINED_VAR_PROPS.contains(property.getName())) {
			// no warning for now
			return
		}
		
		
		val known = properties.exists[p| p.proposal.equals(property.name)]
		
		if ( !known ) {
			if (!suppressWarnings) warning("Unknown property: \""+property.getName()+"\"", property, CssDslPackage.Literals.CSS_PROPERTY__NAME, PROPERTY_UNKNOWN);
		}
		else {
			
			val rs = dec.eContainer as Ruleset
			val selectors = rs.selectors
			
			val selectorProps = ext.getPropertyProposalsForSelector(dec, selectors)
			
			if (selectorProps.size > 0) {
				
				val supported = selectorProps.exists[p|p.proposal.equals(property.name)]
				
				if ( !supported) {
					if (!suppressWarnings) warning("\""+property.getName()+"\" is not supported by the given selectors", CssDslPackage.Literals.CSS_DECLARATION__PROPERTY, PROPERTY_UNSUPPORTED_BY_SELECTOR);
				}
			}
		}
	}
	
}
