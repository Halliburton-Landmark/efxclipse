/*
 * generated by Xtext
 */
package org.eclipse.fx.code.editor.ldef.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class LDefGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Root");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Assignment cLanguageDefinitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLanguageDefinitionLanguageDefParserRuleCall_3_0 = (RuleCall)cLanguageDefinitionAssignment_3.eContents().get(0);
		
		//Root:
		//	"package" name=QualifiedName imports+=Import* languageDefinition=LanguageDef;
		@Override public ParserRule getRule() { return rule; }

		//"package" name=QualifiedName imports+=Import* languageDefinition=LanguageDef
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }

		//Import
		public RuleCall getImportsImportParserRuleCall_2_0() { return cImportsImportParserRuleCall_2_0; }

		//languageDefinition=LanguageDef
		public Assignment getLanguageDefinitionAssignment_3() { return cLanguageDefinitionAssignment_3; }

		//LanguageDef
		public RuleCall getLanguageDefinitionLanguageDefParserRuleCall_3_0() { return cLanguageDefinitionLanguageDefParserRuleCall_3_0; }
	}

	public class ValidIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValidID");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ValidID:
		//	ID;
		@Override public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cValidIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ValidID ("." ValidID)*;
		@Override public ParserRule getRule() { return rule; }

		//ValidID ("." ValidID)*
		public Group getGroup() { return cGroup; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }

		//(=> "." ValidID)*
		public Group getGroup_1() { return cGroup_1; }

		//=> "."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_1_1() { return cValidIDParserRuleCall_1_1; }
	}

	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//QualifiedNameWithWildCard:
		//	QualifiedName ("." "*")?;
		@Override public ParserRule getRule() { return rule; }

		//QualifiedName ("." "*")?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//("." "*")?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=QualifiedNameWithWildCard;
		@Override public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildCard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0; }
	}

	public class LanguageDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LanguageDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParitioningAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParitioningParitioningParserRuleCall_2_0 = (RuleCall)cParitioningAssignment_2.eContents().get(0);
		private final Assignment cLexicalHighlightingAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLexicalHighlightingLexicalHighlightingParserRuleCall_3_0 = (RuleCall)cLexicalHighlightingAssignment_3.eContents().get(0);
		private final Assignment cIntegrationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIntegrationIntegrationParserRuleCall_4_0 = (RuleCall)cIntegrationAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//LanguageDef:
		//	name=ID "{" paritioning=Paritioning lexicalHighlighting=LexicalHighlighting integration=Integration? "}";
		@Override public ParserRule getRule() { return rule; }

		//name=ID "{" paritioning=Paritioning lexicalHighlighting=LexicalHighlighting integration=Integration? "}"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//paritioning=Paritioning
		public Assignment getParitioningAssignment_2() { return cParitioningAssignment_2; }

		//Paritioning
		public RuleCall getParitioningParitioningParserRuleCall_2_0() { return cParitioningParitioningParserRuleCall_2_0; }

		//lexicalHighlighting=LexicalHighlighting
		public Assignment getLexicalHighlightingAssignment_3() { return cLexicalHighlightingAssignment_3; }

		//LexicalHighlighting
		public RuleCall getLexicalHighlightingLexicalHighlightingParserRuleCall_3_0() { return cLexicalHighlightingLexicalHighlightingParserRuleCall_3_0; }

		//integration=Integration?
		public Assignment getIntegrationAssignment_4() { return cIntegrationAssignment_4; }

		//Integration
		public RuleCall getIntegrationIntegrationParserRuleCall_4_0() { return cIntegrationIntegrationParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class IntegrationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Integration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntegrationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCodeIntegrationListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCodeIntegrationListCodeIntegrationParserRuleCall_2_0 = (RuleCall)cCodeIntegrationListAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Integration:
		//	"integration" "{" codeIntegrationList+=CodeIntegration+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"integration" "{" codeIntegrationList+=CodeIntegration+ "}"
		public Group getGroup() { return cGroup; }

		//"integration"
		public Keyword getIntegrationKeyword_0() { return cIntegrationKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//codeIntegrationList+=CodeIntegration+
		public Assignment getCodeIntegrationListAssignment_2() { return cCodeIntegrationListAssignment_2; }

		//CodeIntegration
		public RuleCall getCodeIntegrationListCodeIntegrationParserRuleCall_2_0() { return cCodeIntegrationListCodeIntegrationParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class CodeIntegrationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CodeIntegration");
		private final RuleCall cJavaFXIntegrationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//CodeIntegration: // | SWTIntegration
		//	JavaFXIntegration;
		@Override public ParserRule getRule() { return rule; }

		//// | SWTIntegration
		//JavaFXIntegration
		public RuleCall getJavaFXIntegrationParserRuleCall() { return cJavaFXIntegrationParserRuleCall; }
	}

	public class JavaFXIntegrationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JavaFXIntegration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJavafxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCodegenerationListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCodegenerationListCodegenerationParserRuleCall_2_0 = (RuleCall)cCodegenerationListAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//JavaFXIntegration:
		//	"javafx" "{" codegenerationList+=Codegeneration+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"javafx" "{" codegenerationList+=Codegeneration+ "}"
		public Group getGroup() { return cGroup; }

		//"javafx"
		public Keyword getJavafxKeyword_0() { return cJavafxKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//codegenerationList+=Codegeneration+
		public Assignment getCodegenerationListAssignment_2() { return cCodegenerationListAssignment_2; }

		//Codegeneration
		public RuleCall getCodegenerationListCodegenerationParserRuleCall_2_0() { return cCodegenerationListCodegenerationParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class CodegenerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Codegeneration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJavaCodeGenerationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cE4CodeGenerationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Codegeneration:
		//	JavaCodeGeneration | E4CodeGeneration;
		@Override public ParserRule getRule() { return rule; }

		//JavaCodeGeneration | E4CodeGeneration
		public Alternatives getAlternatives() { return cAlternatives; }

		//JavaCodeGeneration
		public RuleCall getJavaCodeGenerationParserRuleCall_0() { return cJavaCodeGenerationParserRuleCall_0; }

		//E4CodeGeneration
		public RuleCall getE4CodeGenerationParserRuleCall_1() { return cE4CodeGenerationParserRuleCall_1; }
	}

	public class JavaCodeGenerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JavaCodeGeneration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJavaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//JavaCodeGeneration:
		//	"java" name=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"java" name=STRING
		public Group getGroup() { return cGroup; }

		//"java"
		public Keyword getJavaKeyword_0() { return cJavaKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}

	public class E4CodeGenerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "E4CodeGeneration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cE4CodeGenerationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cE4Keyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//E4CodeGeneration:
		//	{E4CodeGeneration} "e4" name=STRING;
		@Override public ParserRule getRule() { return rule; }

		//{E4CodeGeneration} "e4" name=STRING
		public Group getGroup() { return cGroup; }

		//{E4CodeGeneration}
		public Action getE4CodeGenerationAction_0() { return cE4CodeGenerationAction_0; }

		//"e4"
		public Keyword getE4Keyword_1() { return cE4Keyword_1; }

		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
	}

	public class ParitioningElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Paritioning");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPartitioningKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPartitionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPartitionsPartitionParserRuleCall_2_0 = (RuleCall)cPartitionsAssignment_2.eContents().get(0);
		private final Assignment cPartitionerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPartitionerPartitionerParserRuleCall_3_0 = (RuleCall)cPartitionerAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////SWTIntegration:
		////	'swt' '{'
		////		{SWTIntegration}
		////		codegen?='codegeneration'?
		////		e4?='e4'?
		////	'}'
		////;
		//Paritioning:
		//	"partitioning" "{" partitions+=Partition+ partitioner=Partitioner "}";
		@Override public ParserRule getRule() { return rule; }

		//"partitioning" "{" partitions+=Partition+ partitioner=Partitioner "}"
		public Group getGroup() { return cGroup; }

		//"partitioning"
		public Keyword getPartitioningKeyword_0() { return cPartitioningKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//partitions+=Partition+
		public Assignment getPartitionsAssignment_2() { return cPartitionsAssignment_2; }

		//Partition
		public RuleCall getPartitionsPartitionParserRuleCall_2_0() { return cPartitionsPartitionParserRuleCall_2_0; }

		//partitioner=Partitioner
		public Assignment getPartitionerAssignment_3() { return cPartitionerAssignment_3; }

		//Partitioner
		public RuleCall getPartitionerPartitionerParserRuleCall_3_0() { return cPartitionerPartitionerParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class PartitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Partition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPartitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Partition:
		//	"partition" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"partition" name=ID
		public Group getGroup() { return cGroup; }

		//"partition"
		public Keyword getPartitionKeyword_0() { return cPartitionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class PartitionerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Partitioner");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPartitioner_RuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParitioner_JSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Partitioner:
		//	Partitioner_Rule | Paritioner_JS;
		@Override public ParserRule getRule() { return rule; }

		//Partitioner_Rule | Paritioner_JS
		public Alternatives getAlternatives() { return cAlternatives; }

		//Partitioner_Rule
		public RuleCall getPartitioner_RuleParserRuleCall_0() { return cPartitioner_RuleParserRuleCall_0; }

		//Paritioner_JS
		public RuleCall getParitioner_JSParserRuleCall_1() { return cParitioner_JSParserRuleCall_1; }
	}

	public class Paritioner_JSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Paritioner_JS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScriptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cScriptURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cScriptURISTRINGTerminalRuleCall_1_0 = (RuleCall)cScriptURIAssignment_1.eContents().get(0);
		
		//Paritioner_JS:
		//	"script" scriptURI=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"script" scriptURI=STRING
		public Group getGroup() { return cGroup; }

		//"script"
		public Keyword getScriptKeyword_0() { return cScriptKeyword_0; }

		//scriptURI=STRING
		public Assignment getScriptURIAssignment_1() { return cScriptURIAssignment_1; }

		//STRING
		public RuleCall getScriptURISTRINGTerminalRuleCall_1_0() { return cScriptURISTRINGTerminalRuleCall_1_0; }
	}

	public class Partitioner_RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Partitioner_Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRuleListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRuleListPartition_RuleParserRuleCall_2_0 = (RuleCall)cRuleListAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Partitioner_Rule:
		//	"rule" "{" ruleList+=Partition_Rule+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"rule" "{" ruleList+=Partition_Rule+ "}"
		public Group getGroup() { return cGroup; }

		//"rule"
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//ruleList+=Partition_Rule+
		public Assignment getRuleListAssignment_2() { return cRuleListAssignment_2; }

		//Partition_Rule
		public RuleCall getRuleListPartition_RuleParserRuleCall_2_0() { return cRuleListPartition_RuleParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class Partition_RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Partition_Rule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPartition_SingleLineRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPartition_MultiLineRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Partition_Rule:
		//	Partition_SingleLineRule | Partition_MultiLineRule;
		@Override public ParserRule getRule() { return rule; }

		//Partition_SingleLineRule | Partition_MultiLineRule
		public Alternatives getAlternatives() { return cAlternatives; }

		//Partition_SingleLineRule
		public RuleCall getPartition_SingleLineRuleParserRuleCall_0() { return cPartition_SingleLineRuleParserRuleCall_0; }

		//Partition_MultiLineRule
		public RuleCall getPartition_MultiLineRuleParserRuleCall_1() { return cPartition_MultiLineRuleParserRuleCall_1; }
	}

	public class Partition_SingleLineRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Partition_SingleLineRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSingle_lineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cParitionPartitionCrossReference_1_0 = (CrossReference)cParitionAssignment_1.eContents().get(0);
		private final RuleCall cParitionPartitionIDTerminalRuleCall_1_0_1 = (RuleCall)cParitionPartitionCrossReference_1_0.eContents().get(1);
		private final Assignment cStartSeqAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStartSeqSTRINGTerminalRuleCall_2_0 = (RuleCall)cStartSeqAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEndSeqAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEndSeqSTRINGTerminalRuleCall_4_0 = (RuleCall)cEndSeqAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEscapedKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cByKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cEscapeSeqAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cEscapeSeqSTRINGTerminalRuleCall_5_2_0 = (RuleCall)cEscapeSeqAssignment_5_2.eContents().get(0);
		
		//Partition_SingleLineRule:
		//	"single_line" parition=[Partition] startSeq=STRING "=>" endSeq=STRING? ("escaped" "by" escapeSeq=STRING)?;
		@Override public ParserRule getRule() { return rule; }

		//"single_line" parition=[Partition] startSeq=STRING "=>" endSeq=STRING? ("escaped" "by" escapeSeq=STRING)?
		public Group getGroup() { return cGroup; }

		//"single_line"
		public Keyword getSingle_lineKeyword_0() { return cSingle_lineKeyword_0; }

		//parition=[Partition]
		public Assignment getParitionAssignment_1() { return cParitionAssignment_1; }

		//[Partition]
		public CrossReference getParitionPartitionCrossReference_1_0() { return cParitionPartitionCrossReference_1_0; }

		//ID
		public RuleCall getParitionPartitionIDTerminalRuleCall_1_0_1() { return cParitionPartitionIDTerminalRuleCall_1_0_1; }

		//startSeq=STRING
		public Assignment getStartSeqAssignment_2() { return cStartSeqAssignment_2; }

		//STRING
		public RuleCall getStartSeqSTRINGTerminalRuleCall_2_0() { return cStartSeqSTRINGTerminalRuleCall_2_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignGreaterThanSignKeyword_3; }

		//endSeq=STRING?
		public Assignment getEndSeqAssignment_4() { return cEndSeqAssignment_4; }

		//STRING
		public RuleCall getEndSeqSTRINGTerminalRuleCall_4_0() { return cEndSeqSTRINGTerminalRuleCall_4_0; }

		//("escaped" "by" escapeSeq=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//"escaped"
		public Keyword getEscapedKeyword_5_0() { return cEscapedKeyword_5_0; }

		//"by"
		public Keyword getByKeyword_5_1() { return cByKeyword_5_1; }

		//escapeSeq=STRING
		public Assignment getEscapeSeqAssignment_5_2() { return cEscapeSeqAssignment_5_2; }

		//STRING
		public RuleCall getEscapeSeqSTRINGTerminalRuleCall_5_2_0() { return cEscapeSeqSTRINGTerminalRuleCall_5_2_0; }
	}

	public class Partition_MultiLineRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Partition_MultiLineRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMulti_lineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cParitionPartitionCrossReference_1_0 = (CrossReference)cParitionAssignment_1.eContents().get(0);
		private final RuleCall cParitionPartitionIDTerminalRuleCall_1_0_1 = (RuleCall)cParitionPartitionCrossReference_1_0.eContents().get(1);
		private final Assignment cStartSeqAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStartSeqSTRINGTerminalRuleCall_2_0 = (RuleCall)cStartSeqAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEndSeqAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEndSeqSTRINGTerminalRuleCall_4_0 = (RuleCall)cEndSeqAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEscapedKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cByKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cEscapeSeqAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cEscapeSeqSTRINGTerminalRuleCall_5_2_0 = (RuleCall)cEscapeSeqAssignment_5_2.eContents().get(0);
		
		//Partition_MultiLineRule:
		//	"multi_line" parition=[Partition] startSeq=STRING "=>" endSeq=STRING ("escaped" "by" escapeSeq=STRING)?;
		@Override public ParserRule getRule() { return rule; }

		//"multi_line" parition=[Partition] startSeq=STRING "=>" endSeq=STRING ("escaped" "by" escapeSeq=STRING)?
		public Group getGroup() { return cGroup; }

		//"multi_line"
		public Keyword getMulti_lineKeyword_0() { return cMulti_lineKeyword_0; }

		//parition=[Partition]
		public Assignment getParitionAssignment_1() { return cParitionAssignment_1; }

		//[Partition]
		public CrossReference getParitionPartitionCrossReference_1_0() { return cParitionPartitionCrossReference_1_0; }

		//ID
		public RuleCall getParitionPartitionIDTerminalRuleCall_1_0_1() { return cParitionPartitionIDTerminalRuleCall_1_0_1; }

		//startSeq=STRING
		public Assignment getStartSeqAssignment_2() { return cStartSeqAssignment_2; }

		//STRING
		public RuleCall getStartSeqSTRINGTerminalRuleCall_2_0() { return cStartSeqSTRINGTerminalRuleCall_2_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignGreaterThanSignKeyword_3; }

		//endSeq=STRING
		public Assignment getEndSeqAssignment_4() { return cEndSeqAssignment_4; }

		//STRING
		public RuleCall getEndSeqSTRINGTerminalRuleCall_4_0() { return cEndSeqSTRINGTerminalRuleCall_4_0; }

		//("escaped" "by" escapeSeq=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//"escaped"
		public Keyword getEscapedKeyword_5_0() { return cEscapedKeyword_5_0; }

		//"by"
		public Keyword getByKeyword_5_1() { return cByKeyword_5_1; }

		//escapeSeq=STRING
		public Assignment getEscapeSeqAssignment_5_2() { return cEscapeSeqAssignment_5_2; }

		//STRING
		public RuleCall getEscapeSeqSTRINGTerminalRuleCall_5_2_0() { return cEscapeSeqSTRINGTerminalRuleCall_5_2_0; }
	}

	public class LexicalHighlightingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LexicalHighlighting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLexical_highlightingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cListLexicalPartitionHighlightingParserRuleCall_2_0 = (RuleCall)cListAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// -----------------------------------------------------
		//LexicalHighlighting:
		//	"lexical_highlighting" "{" list+=LexicalPartitionHighlighting+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"lexical_highlighting" "{" list+=LexicalPartitionHighlighting+ "}"
		public Group getGroup() { return cGroup; }

		//"lexical_highlighting"
		public Keyword getLexical_highlightingKeyword_0() { return cLexical_highlightingKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//list+=LexicalPartitionHighlighting+
		public Assignment getListAssignment_2() { return cListAssignment_2; }

		//LexicalPartitionHighlighting
		public RuleCall getListLexicalPartitionHighlightingParserRuleCall_2_0() { return cListLexicalPartitionHighlightingParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class LexicalPartitionHighlightingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LexicalPartitionHighlighting");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLexicalPartitionHighlighting_RuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLexicalPartitionHighlighting_JSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LexicalPartitionHighlighting:
		//	LexicalPartitionHighlighting_Rule | LexicalPartitionHighlighting_JS;
		@Override public ParserRule getRule() { return rule; }

		//LexicalPartitionHighlighting_Rule | LexicalPartitionHighlighting_JS
		public Alternatives getAlternatives() { return cAlternatives; }

		//LexicalPartitionHighlighting_Rule
		public RuleCall getLexicalPartitionHighlighting_RuleParserRuleCall_0() { return cLexicalPartitionHighlighting_RuleParserRuleCall_0; }

		//LexicalPartitionHighlighting_JS
		public RuleCall getLexicalPartitionHighlighting_JSParserRuleCall_1() { return cLexicalPartitionHighlighting_JSParserRuleCall_1; }
	}

	public class LexicalPartitionHighlighting_JSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LexicalPartitionHighlighting_JS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScriptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPartitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPartitionPartitionCrossReference_1_0 = (CrossReference)cPartitionAssignment_1.eContents().get(0);
		private final RuleCall cPartitionPartitionIDTerminalRuleCall_1_0_1 = (RuleCall)cPartitionPartitionCrossReference_1_0.eContents().get(1);
		private final Assignment cScriptURIAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cScriptURISTRINGTerminalRuleCall_2_0 = (RuleCall)cScriptURIAssignment_2.eContents().get(0);
		
		//LexicalPartitionHighlighting_JS:
		//	"script" partition=[Partition] scriptURI=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"script" partition=[Partition] scriptURI=STRING
		public Group getGroup() { return cGroup; }

		//"script"
		public Keyword getScriptKeyword_0() { return cScriptKeyword_0; }

		//partition=[Partition]
		public Assignment getPartitionAssignment_1() { return cPartitionAssignment_1; }

		//[Partition]
		public CrossReference getPartitionPartitionCrossReference_1_0() { return cPartitionPartitionCrossReference_1_0; }

		//ID
		public RuleCall getPartitionPartitionIDTerminalRuleCall_1_0_1() { return cPartitionPartitionIDTerminalRuleCall_1_0_1; }

		//scriptURI=STRING
		public Assignment getScriptURIAssignment_2() { return cScriptURIAssignment_2; }

		//STRING
		public RuleCall getScriptURISTRINGTerminalRuleCall_2_0() { return cScriptURISTRINGTerminalRuleCall_2_0; }
	}

	public class LexicalPartitionHighlighting_RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LexicalPartitionHighlighting_Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPartitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPartitionPartitionCrossReference_1_0 = (CrossReference)cPartitionAssignment_1.eContents().get(0);
		private final RuleCall cPartitionPartitionIDTerminalRuleCall_1_0_1 = (RuleCall)cPartitionPartitionCrossReference_1_0.eContents().get(1);
		private final Assignment cWhitespaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWhitespaceWhitespaceRuleParserRuleCall_2_0 = (RuleCall)cWhitespaceAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTokenListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTokenListTokenParserRuleCall_4_0 = (RuleCall)cTokenListAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//LexicalPartitionHighlighting_Rule:
		//	"rule" partition=[Partition] whitespace=WhitespaceRule? "{" tokenList+=Token+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"rule" partition=[Partition] whitespace=WhitespaceRule? "{" tokenList+=Token+ "}"
		public Group getGroup() { return cGroup; }

		//"rule"
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }

		//partition=[Partition]
		public Assignment getPartitionAssignment_1() { return cPartitionAssignment_1; }

		//[Partition]
		public CrossReference getPartitionPartitionCrossReference_1_0() { return cPartitionPartitionCrossReference_1_0; }

		//ID
		public RuleCall getPartitionPartitionIDTerminalRuleCall_1_0_1() { return cPartitionPartitionIDTerminalRuleCall_1_0_1; }

		//whitespace=WhitespaceRule?
		public Assignment getWhitespaceAssignment_2() { return cWhitespaceAssignment_2; }

		//WhitespaceRule
		public RuleCall getWhitespaceWhitespaceRuleParserRuleCall_2_0() { return cWhitespaceWhitespaceRuleParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//tokenList+=Token+
		public Assignment getTokenListAssignment_4() { return cTokenListAssignment_4; }

		//Token
		public RuleCall getTokenListTokenParserRuleCall_4_0() { return cTokenListTokenParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class TokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Token");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDefaultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDefaultDefaultKeyword_0_0 = (Keyword)cDefaultAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cScannerListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cScannerListScannerParserRuleCall_2_1_0 = (RuleCall)cScannerListAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Token:
		//	default?="default"? name=ID ("{" scannerList+=Scanner+ "}")?;
		@Override public ParserRule getRule() { return rule; }

		//default?="default"? name=ID ("{" scannerList+=Scanner+ "}")?
		public Group getGroup() { return cGroup; }

		//default?="default"?
		public Assignment getDefaultAssignment_0() { return cDefaultAssignment_0; }

		//"default"
		public Keyword getDefaultDefaultKeyword_0_0() { return cDefaultDefaultKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("{" scannerList+=Scanner+ "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//scannerList+=Scanner+
		public Assignment getScannerListAssignment_2_1() { return cScannerListAssignment_2_1; }

		//Scanner
		public RuleCall getScannerListScannerParserRuleCall_2_1_0() { return cScannerListScannerParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class ScannerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scanner");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cScanner_KeywordParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cScanner_RuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Scanner:
		//	Scanner_Keyword | Scanner_Rule;
		@Override public ParserRule getRule() { return rule; }

		//Scanner_Keyword | Scanner_Rule
		public Alternatives getAlternatives() { return cAlternatives; }

		//Scanner_Keyword
		public RuleCall getScanner_KeywordParserRuleCall_0() { return cScanner_KeywordParserRuleCall_0; }

		//Scanner_Rule
		public RuleCall getScanner_RuleParserRuleCall_1() { return cScanner_RuleParserRuleCall_1; }
	}

	public class Scanner_KeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scanner_Keyword");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cKeywordsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cKeywordsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKeywordsKeywordParserRuleCall_2_0 = (RuleCall)cKeywordsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cKeywordsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cKeywordsKeywordParserRuleCall_3_1_0 = (RuleCall)cKeywordsAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Scanner_Keyword:
		//	"keywords" "[" keywords+=Keyword ("," keywords+=Keyword)* "]";
		@Override public ParserRule getRule() { return rule; }

		//"keywords" "[" keywords+=Keyword ("," keywords+=Keyword)* "]"
		public Group getGroup() { return cGroup; }

		//"keywords"
		public Keyword getKeywordsKeyword_0() { return cKeywordsKeyword_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//keywords+=Keyword
		public Assignment getKeywordsAssignment_2() { return cKeywordsAssignment_2; }

		//Keyword
		public RuleCall getKeywordsKeywordParserRuleCall_2_0() { return cKeywordsKeywordParserRuleCall_2_0; }

		//("," keywords+=Keyword)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//keywords+=Keyword
		public Assignment getKeywordsAssignment_3_1() { return cKeywordsAssignment_3_1; }

		//Keyword
		public RuleCall getKeywordsKeywordParserRuleCall_3_1_0() { return cKeywordsKeywordParserRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class KeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Keyword");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSinceKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVersionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVersionSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cVersionAssignment_1_1.eContents().get(0);
		
		//Keyword:
		//	name=STRING ("since" version=STRING)?;
		@Override public ParserRule getRule() { return rule; }

		//name=STRING ("since" version=STRING)?
		public Group getGroup() { return cGroup; }

		//name=STRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }

		//("since" version=STRING)?
		public Group getGroup_1() { return cGroup_1; }

		//"since"
		public Keyword getSinceKeyword_1_0() { return cSinceKeyword_1_0; }

		//version=STRING
		public Assignment getVersionAssignment_1_1() { return cVersionAssignment_1_1; }

		//STRING
		public RuleCall getVersionSTRINGTerminalRuleCall_1_1_0() { return cVersionSTRINGTerminalRuleCall_1_1_0; }
	}

	public class Scanner_RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scanner_Rule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cScanner_SingleLineRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cScanner_MultiLineRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cScanner_CharacterRuleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cScanner_JSRuleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cScanner_PatternRuleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Scanner_Rule:
		//	Scanner_SingleLineRule | Scanner_MultiLineRule | Scanner_CharacterRule | Scanner_JSRule | Scanner_PatternRule;
		@Override public ParserRule getRule() { return rule; }

		//Scanner_SingleLineRule | Scanner_MultiLineRule | Scanner_CharacterRule | Scanner_JSRule | Scanner_PatternRule
		public Alternatives getAlternatives() { return cAlternatives; }

		//Scanner_SingleLineRule
		public RuleCall getScanner_SingleLineRuleParserRuleCall_0() { return cScanner_SingleLineRuleParserRuleCall_0; }

		//Scanner_MultiLineRule
		public RuleCall getScanner_MultiLineRuleParserRuleCall_1() { return cScanner_MultiLineRuleParserRuleCall_1; }

		//Scanner_CharacterRule
		public RuleCall getScanner_CharacterRuleParserRuleCall_2() { return cScanner_CharacterRuleParserRuleCall_2; }

		//Scanner_JSRule
		public RuleCall getScanner_JSRuleParserRuleCall_3() { return cScanner_JSRuleParserRuleCall_3; }

		//Scanner_PatternRule
		public RuleCall getScanner_PatternRuleParserRuleCall_4() { return cScanner_PatternRuleParserRuleCall_4; }
	}

	public class Scanner_SingleLineRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scanner_SingleLineRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSingle_lineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStartSeqAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStartSeqSTRINGTerminalRuleCall_1_0 = (RuleCall)cStartSeqAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignGreaterThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEndSeqAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEndSeqSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cEndSeqAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEscapedKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cByKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cEscapeSeqAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cEscapeSeqSTRINGTerminalRuleCall_3_2_0 = (RuleCall)cEscapeSeqAssignment_3_2.eContents().get(0);
		
		//Scanner_SingleLineRule:
		//	"single_line" startSeq=STRING ("=>" endSeq=STRING?)? ("escaped" "by" escapeSeq=STRING)?;
		@Override public ParserRule getRule() { return rule; }

		//"single_line" startSeq=STRING ("=>" endSeq=STRING?)? ("escaped" "by" escapeSeq=STRING)?
		public Group getGroup() { return cGroup; }

		//"single_line"
		public Keyword getSingle_lineKeyword_0() { return cSingle_lineKeyword_0; }

		//startSeq=STRING
		public Assignment getStartSeqAssignment_1() { return cStartSeqAssignment_1; }

		//STRING
		public RuleCall getStartSeqSTRINGTerminalRuleCall_1_0() { return cStartSeqSTRINGTerminalRuleCall_1_0; }

		//("=>" endSeq=STRING?)?
		public Group getGroup_2() { return cGroup_2; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_2_0() { return cEqualsSignGreaterThanSignKeyword_2_0; }

		//endSeq=STRING?
		public Assignment getEndSeqAssignment_2_1() { return cEndSeqAssignment_2_1; }

		//STRING
		public RuleCall getEndSeqSTRINGTerminalRuleCall_2_1_0() { return cEndSeqSTRINGTerminalRuleCall_2_1_0; }

		//("escaped" "by" escapeSeq=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//"escaped"
		public Keyword getEscapedKeyword_3_0() { return cEscapedKeyword_3_0; }

		//"by"
		public Keyword getByKeyword_3_1() { return cByKeyword_3_1; }

		//escapeSeq=STRING
		public Assignment getEscapeSeqAssignment_3_2() { return cEscapeSeqAssignment_3_2; }

		//STRING
		public RuleCall getEscapeSeqSTRINGTerminalRuleCall_3_2_0() { return cEscapeSeqSTRINGTerminalRuleCall_3_2_0; }
	}

	public class Scanner_MultiLineRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scanner_MultiLineRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMulti_lineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStartSeqAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStartSeqSTRINGTerminalRuleCall_1_0 = (RuleCall)cStartSeqAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEndSeqAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEndSeqSTRINGTerminalRuleCall_3_0 = (RuleCall)cEndSeqAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEscapedKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cByKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cEscapeSeqAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cEscapeSeqSTRINGTerminalRuleCall_4_2_0 = (RuleCall)cEscapeSeqAssignment_4_2.eContents().get(0);
		
		//Scanner_MultiLineRule:
		//	"multi_line" startSeq=STRING "=>" endSeq=STRING ("escaped" "by" escapeSeq=STRING)?;
		@Override public ParserRule getRule() { return rule; }

		//"multi_line" startSeq=STRING "=>" endSeq=STRING ("escaped" "by" escapeSeq=STRING)?
		public Group getGroup() { return cGroup; }

		//"multi_line"
		public Keyword getMulti_lineKeyword_0() { return cMulti_lineKeyword_0; }

		//startSeq=STRING
		public Assignment getStartSeqAssignment_1() { return cStartSeqAssignment_1; }

		//STRING
		public RuleCall getStartSeqSTRINGTerminalRuleCall_1_0() { return cStartSeqSTRINGTerminalRuleCall_1_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_2() { return cEqualsSignGreaterThanSignKeyword_2; }

		//endSeq=STRING
		public Assignment getEndSeqAssignment_3() { return cEndSeqAssignment_3; }

		//STRING
		public RuleCall getEndSeqSTRINGTerminalRuleCall_3_0() { return cEndSeqSTRINGTerminalRuleCall_3_0; }

		//("escaped" "by" escapeSeq=STRING)?
		public Group getGroup_4() { return cGroup_4; }

		//"escaped"
		public Keyword getEscapedKeyword_4_0() { return cEscapedKeyword_4_0; }

		//"by"
		public Keyword getByKeyword_4_1() { return cByKeyword_4_1; }

		//escapeSeq=STRING
		public Assignment getEscapeSeqAssignment_4_2() { return cEscapeSeqAssignment_4_2; }

		//STRING
		public RuleCall getEscapeSeqSTRINGTerminalRuleCall_4_2_0() { return cEscapeSeqSTRINGTerminalRuleCall_4_2_0; }
	}

	public class Scanner_PatternRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scanner_PatternRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPatternKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStartPatternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStartPatternSTRINGTerminalRuleCall_1_0 = (RuleCall)cStartPatternAssignment_1.eContents().get(0);
		private final Assignment cLengthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLengthINTTerminalRuleCall_2_0 = (RuleCall)cLengthAssignment_2.eContents().get(0);
		private final Keyword cContainingKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cContentPatternAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cContentPatternSTRINGTerminalRuleCall_4_0 = (RuleCall)cContentPatternAssignment_4.eContents().get(0);
		
		//Scanner_PatternRule:
		//	"pattern" startPattern=STRING length=INT? "containing" contentPattern=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"pattern" startPattern=STRING length=INT? "containing" contentPattern=STRING
		public Group getGroup() { return cGroup; }

		//"pattern"
		public Keyword getPatternKeyword_0() { return cPatternKeyword_0; }

		//startPattern=STRING
		public Assignment getStartPatternAssignment_1() { return cStartPatternAssignment_1; }

		//STRING
		public RuleCall getStartPatternSTRINGTerminalRuleCall_1_0() { return cStartPatternSTRINGTerminalRuleCall_1_0; }

		//length=INT?
		public Assignment getLengthAssignment_2() { return cLengthAssignment_2; }

		//INT
		public RuleCall getLengthINTTerminalRuleCall_2_0() { return cLengthINTTerminalRuleCall_2_0; }

		//"containing"
		public Keyword getContainingKeyword_3() { return cContainingKeyword_3; }

		//contentPattern=STRING
		public Assignment getContentPatternAssignment_4() { return cContentPatternAssignment_4; }

		//STRING
		public RuleCall getContentPatternSTRINGTerminalRuleCall_4_0() { return cContentPatternSTRINGTerminalRuleCall_4_0; }
	}

	public class Scanner_CharacterRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scanner_CharacterRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCharacterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCharactersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCharactersSTRINGTerminalRuleCall_2_0 = (RuleCall)cCharactersAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCharactersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCharactersSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cCharactersAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Scanner_CharacterRule:
		//	"character" "[" characters+=STRING ("," characters+=STRING)* "]";
		@Override public ParserRule getRule() { return rule; }

		//"character" "[" characters+=STRING ("," characters+=STRING)* "]"
		public Group getGroup() { return cGroup; }

		//"character"
		public Keyword getCharacterKeyword_0() { return cCharacterKeyword_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//characters+=STRING
		public Assignment getCharactersAssignment_2() { return cCharactersAssignment_2; }

		//STRING
		public RuleCall getCharactersSTRINGTerminalRuleCall_2_0() { return cCharactersSTRINGTerminalRuleCall_2_0; }

		//("," characters+=STRING)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//characters+=STRING
		public Assignment getCharactersAssignment_3_1() { return cCharactersAssignment_3_1; }

		//STRING
		public RuleCall getCharactersSTRINGTerminalRuleCall_3_1_0() { return cCharactersSTRINGTerminalRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class Scanner_JSRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scanner_JSRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScriptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFileURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFileURISTRINGTerminalRuleCall_1_0 = (RuleCall)cFileURIAssignment_1.eContents().get(0);
		
		//Scanner_JSRule:
		//	"script" fileURI=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"script" fileURI=STRING
		public Group getGroup() { return cGroup; }

		//"script"
		public Keyword getScriptKeyword_0() { return cScriptKeyword_0; }

		//fileURI=STRING
		public Assignment getFileURIAssignment_1() { return cFileURIAssignment_1; }

		//STRING
		public RuleCall getFileURISTRINGTerminalRuleCall_1_0() { return cFileURISTRINGTerminalRuleCall_1_0; }
	}

	public class WhitespaceRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhitespaceRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhitespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cCharactersAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cCharactersSTRINGTerminalRuleCall_1_0_1_0 = (RuleCall)cCharactersAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cCommaKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cCharactersAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cCharactersSTRINGTerminalRuleCall_1_0_2_1_0 = (RuleCall)cCharactersAssignment_1_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Assignment cJavawhitespaceAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cJavawhitespaceJavawhitespaceKeyword_1_1_0 = (Keyword)cJavawhitespaceAssignment_1_1.eContents().get(0);
		private final Assignment cFileURIAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cFileURISTRINGTerminalRuleCall_1_2_0 = (RuleCall)cFileURIAssignment_1_2.eContents().get(0);
		
		//WhitespaceRule:
		//	"whitespace" ("[" characters+=STRING ("," characters+=STRING)* "]" | javawhitespace?="javawhitespace" |
		//	fileURI=STRING);
		@Override public ParserRule getRule() { return rule; }

		//"whitespace" ("[" characters+=STRING ("," characters+=STRING)* "]" | javawhitespace?="javawhitespace" | fileURI=STRING)
		public Group getGroup() { return cGroup; }

		//"whitespace"
		public Keyword getWhitespaceKeyword_0() { return cWhitespaceKeyword_0; }

		//"[" characters+=STRING ("," characters+=STRING)* "]" | javawhitespace?="javawhitespace" | fileURI=STRING
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"[" characters+=STRING ("," characters+=STRING)* "]"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0_0() { return cLeftSquareBracketKeyword_1_0_0; }

		//characters+=STRING
		public Assignment getCharactersAssignment_1_0_1() { return cCharactersAssignment_1_0_1; }

		//STRING
		public RuleCall getCharactersSTRINGTerminalRuleCall_1_0_1_0() { return cCharactersSTRINGTerminalRuleCall_1_0_1_0; }

		//("," characters+=STRING)*
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//","
		public Keyword getCommaKeyword_1_0_2_0() { return cCommaKeyword_1_0_2_0; }

		//characters+=STRING
		public Assignment getCharactersAssignment_1_0_2_1() { return cCharactersAssignment_1_0_2_1; }

		//STRING
		public RuleCall getCharactersSTRINGTerminalRuleCall_1_0_2_1_0() { return cCharactersSTRINGTerminalRuleCall_1_0_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_3() { return cRightSquareBracketKeyword_1_0_3; }

		//javawhitespace?="javawhitespace"
		public Assignment getJavawhitespaceAssignment_1_1() { return cJavawhitespaceAssignment_1_1; }

		//"javawhitespace"
		public Keyword getJavawhitespaceJavawhitespaceKeyword_1_1_0() { return cJavawhitespaceJavawhitespaceKeyword_1_1_0; }

		//fileURI=STRING
		public Assignment getFileURIAssignment_1_2() { return cFileURIAssignment_1_2; }

		//STRING
		public RuleCall getFileURISTRINGTerminalRuleCall_1_2_0() { return cFileURISTRINGTerminalRuleCall_1_2_0; }
	}
	
	
	private final RootElements pRoot;
	private final ValidIDElements pValidID;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	private final ImportElements pImport;
	private final LanguageDefElements pLanguageDef;
	private final IntegrationElements pIntegration;
	private final CodeIntegrationElements pCodeIntegration;
	private final JavaFXIntegrationElements pJavaFXIntegration;
	private final CodegenerationElements pCodegeneration;
	private final JavaCodeGenerationElements pJavaCodeGeneration;
	private final E4CodeGenerationElements pE4CodeGeneration;
	private final ParitioningElements pParitioning;
	private final PartitionElements pPartition;
	private final PartitionerElements pPartitioner;
	private final Paritioner_JSElements pParitioner_JS;
	private final Partitioner_RuleElements pPartitioner_Rule;
	private final Partition_RuleElements pPartition_Rule;
	private final Partition_SingleLineRuleElements pPartition_SingleLineRule;
	private final Partition_MultiLineRuleElements pPartition_MultiLineRule;
	private final LexicalHighlightingElements pLexicalHighlighting;
	private final LexicalPartitionHighlightingElements pLexicalPartitionHighlighting;
	private final LexicalPartitionHighlighting_JSElements pLexicalPartitionHighlighting_JS;
	private final LexicalPartitionHighlighting_RuleElements pLexicalPartitionHighlighting_Rule;
	private final TokenElements pToken;
	private final ScannerElements pScanner;
	private final Scanner_KeywordElements pScanner_Keyword;
	private final KeywordElements pKeyword;
	private final Scanner_RuleElements pScanner_Rule;
	private final Scanner_SingleLineRuleElements pScanner_SingleLineRule;
	private final Scanner_MultiLineRuleElements pScanner_MultiLineRule;
	private final Scanner_PatternRuleElements pScanner_PatternRule;
	private final Scanner_CharacterRuleElements pScanner_CharacterRule;
	private final Scanner_JSRuleElements pScanner_JSRule;
	private final WhitespaceRuleElements pWhitespaceRule;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LDefGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRoot = new RootElements();
		this.pValidID = new ValidIDElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements();
		this.pImport = new ImportElements();
		this.pLanguageDef = new LanguageDefElements();
		this.pIntegration = new IntegrationElements();
		this.pCodeIntegration = new CodeIntegrationElements();
		this.pJavaFXIntegration = new JavaFXIntegrationElements();
		this.pCodegeneration = new CodegenerationElements();
		this.pJavaCodeGeneration = new JavaCodeGenerationElements();
		this.pE4CodeGeneration = new E4CodeGenerationElements();
		this.pParitioning = new ParitioningElements();
		this.pPartition = new PartitionElements();
		this.pPartitioner = new PartitionerElements();
		this.pParitioner_JS = new Paritioner_JSElements();
		this.pPartitioner_Rule = new Partitioner_RuleElements();
		this.pPartition_Rule = new Partition_RuleElements();
		this.pPartition_SingleLineRule = new Partition_SingleLineRuleElements();
		this.pPartition_MultiLineRule = new Partition_MultiLineRuleElements();
		this.pLexicalHighlighting = new LexicalHighlightingElements();
		this.pLexicalPartitionHighlighting = new LexicalPartitionHighlightingElements();
		this.pLexicalPartitionHighlighting_JS = new LexicalPartitionHighlighting_JSElements();
		this.pLexicalPartitionHighlighting_Rule = new LexicalPartitionHighlighting_RuleElements();
		this.pToken = new TokenElements();
		this.pScanner = new ScannerElements();
		this.pScanner_Keyword = new Scanner_KeywordElements();
		this.pKeyword = new KeywordElements();
		this.pScanner_Rule = new Scanner_RuleElements();
		this.pScanner_SingleLineRule = new Scanner_SingleLineRuleElements();
		this.pScanner_MultiLineRule = new Scanner_MultiLineRuleElements();
		this.pScanner_PatternRule = new Scanner_PatternRuleElements();
		this.pScanner_CharacterRule = new Scanner_CharacterRuleElements();
		this.pScanner_JSRule = new Scanner_JSRuleElements();
		this.pWhitespaceRule = new WhitespaceRuleElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.fx.code.editor.ldef.LDef".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Root:
	//	"package" name=QualifiedName imports+=Import* languageDefinition=LanguageDef;
	public RootElements getRootAccess() {
		return pRoot;
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//ValidID:
	//	ID;
	public ValidIDElements getValidIDAccess() {
		return pValidID;
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//QualifiedNameWithWildCard:
	//	QualifiedName ("." "*")?;
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return pQualifiedNameWithWildCard;
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedNameWithWildCard;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//LanguageDef:
	//	name=ID "{" paritioning=Paritioning lexicalHighlighting=LexicalHighlighting integration=Integration? "}";
	public LanguageDefElements getLanguageDefAccess() {
		return pLanguageDef;
	}
	
	public ParserRule getLanguageDefRule() {
		return getLanguageDefAccess().getRule();
	}

	//Integration:
	//	"integration" "{" codeIntegrationList+=CodeIntegration+ "}";
	public IntegrationElements getIntegrationAccess() {
		return pIntegration;
	}
	
	public ParserRule getIntegrationRule() {
		return getIntegrationAccess().getRule();
	}

	//CodeIntegration: // | SWTIntegration
	//	JavaFXIntegration;
	public CodeIntegrationElements getCodeIntegrationAccess() {
		return pCodeIntegration;
	}
	
	public ParserRule getCodeIntegrationRule() {
		return getCodeIntegrationAccess().getRule();
	}

	//JavaFXIntegration:
	//	"javafx" "{" codegenerationList+=Codegeneration+ "}";
	public JavaFXIntegrationElements getJavaFXIntegrationAccess() {
		return pJavaFXIntegration;
	}
	
	public ParserRule getJavaFXIntegrationRule() {
		return getJavaFXIntegrationAccess().getRule();
	}

	//Codegeneration:
	//	JavaCodeGeneration | E4CodeGeneration;
	public CodegenerationElements getCodegenerationAccess() {
		return pCodegeneration;
	}
	
	public ParserRule getCodegenerationRule() {
		return getCodegenerationAccess().getRule();
	}

	//JavaCodeGeneration:
	//	"java" name=STRING;
	public JavaCodeGenerationElements getJavaCodeGenerationAccess() {
		return pJavaCodeGeneration;
	}
	
	public ParserRule getJavaCodeGenerationRule() {
		return getJavaCodeGenerationAccess().getRule();
	}

	//E4CodeGeneration:
	//	{E4CodeGeneration} "e4" name=STRING;
	public E4CodeGenerationElements getE4CodeGenerationAccess() {
		return pE4CodeGeneration;
	}
	
	public ParserRule getE4CodeGenerationRule() {
		return getE4CodeGenerationAccess().getRule();
	}

	////SWTIntegration:
	////	'swt' '{'
	////		{SWTIntegration}
	////		codegen?='codegeneration'?
	////		e4?='e4'?
	////	'}'
	////;
	//Paritioning:
	//	"partitioning" "{" partitions+=Partition+ partitioner=Partitioner "}";
	public ParitioningElements getParitioningAccess() {
		return pParitioning;
	}
	
	public ParserRule getParitioningRule() {
		return getParitioningAccess().getRule();
	}

	//Partition:
	//	"partition" name=ID;
	public PartitionElements getPartitionAccess() {
		return pPartition;
	}
	
	public ParserRule getPartitionRule() {
		return getPartitionAccess().getRule();
	}

	//Partitioner:
	//	Partitioner_Rule | Paritioner_JS;
	public PartitionerElements getPartitionerAccess() {
		return pPartitioner;
	}
	
	public ParserRule getPartitionerRule() {
		return getPartitionerAccess().getRule();
	}

	//Paritioner_JS:
	//	"script" scriptURI=STRING;
	public Paritioner_JSElements getParitioner_JSAccess() {
		return pParitioner_JS;
	}
	
	public ParserRule getParitioner_JSRule() {
		return getParitioner_JSAccess().getRule();
	}

	//Partitioner_Rule:
	//	"rule" "{" ruleList+=Partition_Rule+ "}";
	public Partitioner_RuleElements getPartitioner_RuleAccess() {
		return pPartitioner_Rule;
	}
	
	public ParserRule getPartitioner_RuleRule() {
		return getPartitioner_RuleAccess().getRule();
	}

	//Partition_Rule:
	//	Partition_SingleLineRule | Partition_MultiLineRule;
	public Partition_RuleElements getPartition_RuleAccess() {
		return pPartition_Rule;
	}
	
	public ParserRule getPartition_RuleRule() {
		return getPartition_RuleAccess().getRule();
	}

	//Partition_SingleLineRule:
	//	"single_line" parition=[Partition] startSeq=STRING "=>" endSeq=STRING? ("escaped" "by" escapeSeq=STRING)?;
	public Partition_SingleLineRuleElements getPartition_SingleLineRuleAccess() {
		return pPartition_SingleLineRule;
	}
	
	public ParserRule getPartition_SingleLineRuleRule() {
		return getPartition_SingleLineRuleAccess().getRule();
	}

	//Partition_MultiLineRule:
	//	"multi_line" parition=[Partition] startSeq=STRING "=>" endSeq=STRING ("escaped" "by" escapeSeq=STRING)?;
	public Partition_MultiLineRuleElements getPartition_MultiLineRuleAccess() {
		return pPartition_MultiLineRule;
	}
	
	public ParserRule getPartition_MultiLineRuleRule() {
		return getPartition_MultiLineRuleAccess().getRule();
	}

	//// -----------------------------------------------------
	//LexicalHighlighting:
	//	"lexical_highlighting" "{" list+=LexicalPartitionHighlighting+ "}";
	public LexicalHighlightingElements getLexicalHighlightingAccess() {
		return pLexicalHighlighting;
	}
	
	public ParserRule getLexicalHighlightingRule() {
		return getLexicalHighlightingAccess().getRule();
	}

	//LexicalPartitionHighlighting:
	//	LexicalPartitionHighlighting_Rule | LexicalPartitionHighlighting_JS;
	public LexicalPartitionHighlightingElements getLexicalPartitionHighlightingAccess() {
		return pLexicalPartitionHighlighting;
	}
	
	public ParserRule getLexicalPartitionHighlightingRule() {
		return getLexicalPartitionHighlightingAccess().getRule();
	}

	//LexicalPartitionHighlighting_JS:
	//	"script" partition=[Partition] scriptURI=STRING;
	public LexicalPartitionHighlighting_JSElements getLexicalPartitionHighlighting_JSAccess() {
		return pLexicalPartitionHighlighting_JS;
	}
	
	public ParserRule getLexicalPartitionHighlighting_JSRule() {
		return getLexicalPartitionHighlighting_JSAccess().getRule();
	}

	//LexicalPartitionHighlighting_Rule:
	//	"rule" partition=[Partition] whitespace=WhitespaceRule? "{" tokenList+=Token+ "}";
	public LexicalPartitionHighlighting_RuleElements getLexicalPartitionHighlighting_RuleAccess() {
		return pLexicalPartitionHighlighting_Rule;
	}
	
	public ParserRule getLexicalPartitionHighlighting_RuleRule() {
		return getLexicalPartitionHighlighting_RuleAccess().getRule();
	}

	//Token:
	//	default?="default"? name=ID ("{" scannerList+=Scanner+ "}")?;
	public TokenElements getTokenAccess() {
		return pToken;
	}
	
	public ParserRule getTokenRule() {
		return getTokenAccess().getRule();
	}

	//Scanner:
	//	Scanner_Keyword | Scanner_Rule;
	public ScannerElements getScannerAccess() {
		return pScanner;
	}
	
	public ParserRule getScannerRule() {
		return getScannerAccess().getRule();
	}

	//Scanner_Keyword:
	//	"keywords" "[" keywords+=Keyword ("," keywords+=Keyword)* "]";
	public Scanner_KeywordElements getScanner_KeywordAccess() {
		return pScanner_Keyword;
	}
	
	public ParserRule getScanner_KeywordRule() {
		return getScanner_KeywordAccess().getRule();
	}

	//Keyword:
	//	name=STRING ("since" version=STRING)?;
	public KeywordElements getKeywordAccess() {
		return pKeyword;
	}
	
	public ParserRule getKeywordRule() {
		return getKeywordAccess().getRule();
	}

	//Scanner_Rule:
	//	Scanner_SingleLineRule | Scanner_MultiLineRule | Scanner_CharacterRule | Scanner_JSRule | Scanner_PatternRule;
	public Scanner_RuleElements getScanner_RuleAccess() {
		return pScanner_Rule;
	}
	
	public ParserRule getScanner_RuleRule() {
		return getScanner_RuleAccess().getRule();
	}

	//Scanner_SingleLineRule:
	//	"single_line" startSeq=STRING ("=>" endSeq=STRING?)? ("escaped" "by" escapeSeq=STRING)?;
	public Scanner_SingleLineRuleElements getScanner_SingleLineRuleAccess() {
		return pScanner_SingleLineRule;
	}
	
	public ParserRule getScanner_SingleLineRuleRule() {
		return getScanner_SingleLineRuleAccess().getRule();
	}

	//Scanner_MultiLineRule:
	//	"multi_line" startSeq=STRING "=>" endSeq=STRING ("escaped" "by" escapeSeq=STRING)?;
	public Scanner_MultiLineRuleElements getScanner_MultiLineRuleAccess() {
		return pScanner_MultiLineRule;
	}
	
	public ParserRule getScanner_MultiLineRuleRule() {
		return getScanner_MultiLineRuleAccess().getRule();
	}

	//Scanner_PatternRule:
	//	"pattern" startPattern=STRING length=INT? "containing" contentPattern=STRING;
	public Scanner_PatternRuleElements getScanner_PatternRuleAccess() {
		return pScanner_PatternRule;
	}
	
	public ParserRule getScanner_PatternRuleRule() {
		return getScanner_PatternRuleAccess().getRule();
	}

	//Scanner_CharacterRule:
	//	"character" "[" characters+=STRING ("," characters+=STRING)* "]";
	public Scanner_CharacterRuleElements getScanner_CharacterRuleAccess() {
		return pScanner_CharacterRule;
	}
	
	public ParserRule getScanner_CharacterRuleRule() {
		return getScanner_CharacterRuleAccess().getRule();
	}

	//Scanner_JSRule:
	//	"script" fileURI=STRING;
	public Scanner_JSRuleElements getScanner_JSRuleAccess() {
		return pScanner_JSRule;
	}
	
	public ParserRule getScanner_JSRuleRule() {
		return getScanner_JSRuleAccess().getRule();
	}

	//WhitespaceRule:
	//	"whitespace" ("[" characters+=STRING ("," characters+=STRING)* "]" | javawhitespace?="javawhitespace" |
	//	fileURI=STRING);
	public WhitespaceRuleElements getWhitespaceRuleAccess() {
		return pWhitespaceRule;
	}
	
	public ParserRule getWhitespaceRuleRule() {
		return getWhitespaceRuleAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
