/*
* generated by Xtext
*/
package org.eclipse.fx.code.compensator.hsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class HSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPartitionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPartitionsPartitionParserRuleCall_2_0 = (RuleCall)cPartitionsAssignment_2.eContents().get(0);
		private final Assignment cDamagersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDamagersDamagerParserRuleCall_3_0 = (RuleCall)cDamagersAssignment_3.eContents().get(0);
		private final Assignment cPartitionerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPartitionerPartitionerParserRuleCall_4_0 = (RuleCall)cPartitionerAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Model:
		//	name=ID "{" partitions+=Partition+ damagers+=Damager+ partitioner=Partitioner "}";
		public ParserRule getRule() { return rule; }

		//name=ID "{" partitions+=Partition+ damagers+=Damager+ partitioner=Partitioner "}"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//partitions+=Partition+
		public Assignment getPartitionsAssignment_2() { return cPartitionsAssignment_2; }

		//Partition
		public RuleCall getPartitionsPartitionParserRuleCall_2_0() { return cPartitionsPartitionParserRuleCall_2_0; }

		//damagers+=Damager+
		public Assignment getDamagersAssignment_3() { return cDamagersAssignment_3; }

		//Damager
		public RuleCall getDamagersDamagerParserRuleCall_3_0() { return cDamagersDamagerParserRuleCall_3_0; }

		//partitioner=Partitioner
		public Assignment getPartitionerAssignment_4() { return cPartitionerAssignment_4; }

		//Partitioner
		public RuleCall getPartitionerPartitionerParserRuleCall_4_0() { return cPartitionerPartitionerParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class PartitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Partition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPartitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Partition:
		//	"partition" name=ID;
		public ParserRule getRule() { return rule; }

		//"partition" name=ID
		public Group getGroup() { return cGroup; }

		//"partition"
		public Keyword getPartitionKeyword_0() { return cPartitionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class PartitionerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Partitioner");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRulePartitionerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJSParitionerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Partitioner:
		//	RulePartitioner | JSParitioner;
		public ParserRule getRule() { return rule; }

		//RulePartitioner | JSParitioner
		public Alternatives getAlternatives() { return cAlternatives; }

		//RulePartitioner
		public RuleCall getRulePartitionerParserRuleCall_0() { return cRulePartitionerParserRuleCall_0; }

		//JSParitioner
		public RuleCall getJSParitionerParserRuleCall_1() { return cJSParitionerParserRuleCall_1; }
	}

	public class RulePartitionerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RulePartitioner");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRulePartitionerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRulesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRulesParitionRuleParserRuleCall_2_0 = (RuleCall)cRulesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RulePartitioner:
		//	"rule-partitioner" "{" rules+=ParitionRule+ "}";
		public ParserRule getRule() { return rule; }

		//"rule-partitioner" "{" rules+=ParitionRule+ "}"
		public Group getGroup() { return cGroup; }

		//"rule-partitioner"
		public Keyword getRulePartitionerKeyword_0() { return cRulePartitionerKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//rules+=ParitionRule+
		public Assignment getRulesAssignment_2() { return cRulesAssignment_2; }

		//ParitionRule
		public RuleCall getRulesParitionRuleParserRuleCall_2_0() { return cRulesParitionRuleParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class JSParitionerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JSParitioner");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJsPartitionerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFileURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFileURISTRINGTerminalRuleCall_1_0 = (RuleCall)cFileURIAssignment_1.eContents().get(0);
		
		//JSParitioner:
		//	"js-partitioner" fileURI=STRING;
		public ParserRule getRule() { return rule; }

		//"js-partitioner" fileURI=STRING
		public Group getGroup() { return cGroup; }

		//"js-partitioner"
		public Keyword getJsPartitionerKeyword_0() { return cJsPartitionerKeyword_0; }

		//fileURI=STRING
		public Assignment getFileURIAssignment_1() { return cFileURIAssignment_1; }

		//STRING
		public RuleCall getFileURISTRINGTerminalRuleCall_1_0() { return cFileURISTRINGTerminalRuleCall_1_0; }
	}

	public class DamagerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Damager");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRuleDamagerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJSDamagerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Damager:
		//	RuleDamager | JSDamager;
		public ParserRule getRule() { return rule; }

		//RuleDamager | JSDamager
		public Alternatives getAlternatives() { return cAlternatives; }

		//RuleDamager
		public RuleCall getRuleDamagerParserRuleCall_0() { return cRuleDamagerParserRuleCall_0; }

		//JSDamager
		public RuleCall getJSDamagerParserRuleCall_1() { return cJSDamagerParserRuleCall_1; }
	}

	public class JSDamagerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JSDamager");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJsDamagerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPartitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPartitionPartitionCrossReference_1_0 = (CrossReference)cPartitionAssignment_1.eContents().get(0);
		private final RuleCall cPartitionPartitionIDTerminalRuleCall_1_0_1 = (RuleCall)cPartitionPartitionCrossReference_1_0.eContents().get(1);
		private final Assignment cFileURIAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFileURISTRINGTerminalRuleCall_2_0 = (RuleCall)cFileURIAssignment_2.eContents().get(0);
		
		//JSDamager:
		//	"js-damager" partition=[Partition] fileURI=STRING;
		public ParserRule getRule() { return rule; }

		//"js-damager" partition=[Partition] fileURI=STRING
		public Group getGroup() { return cGroup; }

		//"js-damager"
		public Keyword getJsDamagerKeyword_0() { return cJsDamagerKeyword_0; }

		//partition=[Partition]
		public Assignment getPartitionAssignment_1() { return cPartitionAssignment_1; }

		//[Partition]
		public CrossReference getPartitionPartitionCrossReference_1_0() { return cPartitionPartitionCrossReference_1_0; }

		//ID
		public RuleCall getPartitionPartitionIDTerminalRuleCall_1_0_1() { return cPartitionPartitionIDTerminalRuleCall_1_0_1; }

		//fileURI=STRING
		public Assignment getFileURIAssignment_2() { return cFileURIAssignment_2; }

		//STRING
		public RuleCall getFileURISTRINGTerminalRuleCall_2_0() { return cFileURISTRINGTerminalRuleCall_2_0; }
	}

	public class RuleDamagerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleDamager");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleDamagerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPartitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPartitionPartitionCrossReference_1_0 = (CrossReference)cPartitionAssignment_1.eContents().get(0);
		private final RuleCall cPartitionPartitionIDTerminalRuleCall_1_0_1 = (RuleCall)cPartitionPartitionCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTokensAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTokensScannerTokenParserRuleCall_3_0 = (RuleCall)cTokensAssignment_3.eContents().get(0);
		private final Assignment cKeywordGroupsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cKeywordGroupsKeywordGroupParserRuleCall_4_0 = (RuleCall)cKeywordGroupsAssignment_4.eContents().get(0);
		private final Assignment cRulesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRulesScannerRuleParserRuleCall_5_0 = (RuleCall)cRulesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//RuleDamager:
		//	"rule-damager" partition=[Partition] "{" tokens+=ScannerToken* keywordGroups+=KeywordGroup* rules+=ScannerRule+ "}";
		public ParserRule getRule() { return rule; }

		//"rule-damager" partition=[Partition] "{" tokens+=ScannerToken* keywordGroups+=KeywordGroup* rules+=ScannerRule+ "}"
		public Group getGroup() { return cGroup; }

		//"rule-damager"
		public Keyword getRuleDamagerKeyword_0() { return cRuleDamagerKeyword_0; }

		//partition=[Partition]
		public Assignment getPartitionAssignment_1() { return cPartitionAssignment_1; }

		//[Partition]
		public CrossReference getPartitionPartitionCrossReference_1_0() { return cPartitionPartitionCrossReference_1_0; }

		//ID
		public RuleCall getPartitionPartitionIDTerminalRuleCall_1_0_1() { return cPartitionPartitionIDTerminalRuleCall_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//tokens+=ScannerToken*
		public Assignment getTokensAssignment_3() { return cTokensAssignment_3; }

		//ScannerToken
		public RuleCall getTokensScannerTokenParserRuleCall_3_0() { return cTokensScannerTokenParserRuleCall_3_0; }

		//keywordGroups+=KeywordGroup*
		public Assignment getKeywordGroupsAssignment_4() { return cKeywordGroupsAssignment_4; }

		//KeywordGroup
		public RuleCall getKeywordGroupsKeywordGroupParserRuleCall_4_0() { return cKeywordGroupsKeywordGroupParserRuleCall_4_0; }

		//rules+=ScannerRule+
		public Assignment getRulesAssignment_5() { return cRulesAssignment_5; }

		//ScannerRule
		public RuleCall getRulesScannerRuleParserRuleCall_5_0() { return cRulesScannerRuleParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ScannerTokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScannerToken");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDefaultAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDefaultDefaultKeyword_0_0 = (Keyword)cDefaultAssignment_0.eContents().get(0);
		private final Keyword cTokenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cFgcolorKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cColonKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cFgColorAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cFgColorColorParserRuleCall_3_1_2_0 = (RuleCall)cFgColorAssignment_3_1_2.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cBgcolorKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Keyword cColonKeyword_3_2_1 = (Keyword)cGroup_3_2.eContents().get(1);
		private final Assignment cBgColorAssignment_3_2_2 = (Assignment)cGroup_3_2.eContents().get(2);
		private final RuleCall cBgColorColorParserRuleCall_3_2_2_0 = (RuleCall)cBgColorAssignment_3_2_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cFontKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Keyword cColonKeyword_3_3_1 = (Keyword)cGroup_3_3.eContents().get(1);
		private final Assignment cFontAssignment_3_3_2 = (Assignment)cGroup_3_3.eContents().get(2);
		private final RuleCall cFontFontParserRuleCall_3_3_2_0 = (RuleCall)cFontAssignment_3_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//ScannerToken:
		//	default?="default"? "token" name=ID ("{" ("fgcolor" ":" fgColor=Color)? ("bgcolor" ":" bgColor=Color)? ("font" ":"
		//	font=Font)? "}")?;
		public ParserRule getRule() { return rule; }

		//default?="default"? "token" name=ID ("{" ("fgcolor" ":" fgColor=Color)? ("bgcolor" ":" bgColor=Color)? ("font" ":"
		//font=Font)? "}")?
		public Group getGroup() { return cGroup; }

		//default?="default"?
		public Assignment getDefaultAssignment_0() { return cDefaultAssignment_0; }

		//"default"
		public Keyword getDefaultDefaultKeyword_0_0() { return cDefaultDefaultKeyword_0_0; }

		//"token"
		public Keyword getTokenKeyword_1() { return cTokenKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("{" ("fgcolor" ":" fgColor=Color)? ("bgcolor" ":" bgColor=Color)? ("font" ":" font=Font)? "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//("fgcolor" ":" fgColor=Color)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"fgcolor"
		public Keyword getFgcolorKeyword_3_1_0() { return cFgcolorKeyword_3_1_0; }

		//":"
		public Keyword getColonKeyword_3_1_1() { return cColonKeyword_3_1_1; }

		//fgColor=Color
		public Assignment getFgColorAssignment_3_1_2() { return cFgColorAssignment_3_1_2; }

		//Color
		public RuleCall getFgColorColorParserRuleCall_3_1_2_0() { return cFgColorColorParserRuleCall_3_1_2_0; }

		//("bgcolor" ":" bgColor=Color)?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"bgcolor"
		public Keyword getBgcolorKeyword_3_2_0() { return cBgcolorKeyword_3_2_0; }

		//":"
		public Keyword getColonKeyword_3_2_1() { return cColonKeyword_3_2_1; }

		//bgColor=Color
		public Assignment getBgColorAssignment_3_2_2() { return cBgColorAssignment_3_2_2; }

		//Color
		public RuleCall getBgColorColorParserRuleCall_3_2_2_0() { return cBgColorColorParserRuleCall_3_2_2_0; }

		//("font" ":" font=Font)?
		public Group getGroup_3_3() { return cGroup_3_3; }

		//"font"
		public Keyword getFontKeyword_3_3_0() { return cFontKeyword_3_3_0; }

		//":"
		public Keyword getColonKeyword_3_3_1() { return cColonKeyword_3_3_1; }

		//font=Font
		public Assignment getFontAssignment_3_3_2() { return cFontAssignment_3_3_2; }

		//Font
		public RuleCall getFontFontParserRuleCall_3_3_2_0() { return cFontFontParserRuleCall_3_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
	}

	public class KeywordGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KeywordGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cKeywordsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTokenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTokenScannerTokenCrossReference_1_0 = (CrossReference)cTokenAssignment_1.eContents().get(0);
		private final RuleCall cTokenScannerTokenIDTerminalRuleCall_1_0_1 = (RuleCall)cTokenScannerTokenCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cKeywordsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cKeywordsKeywordParserRuleCall_3_0 = (RuleCall)cKeywordsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cKeywordsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cKeywordsKeywordParserRuleCall_4_1_0 = (RuleCall)cKeywordsAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//KeywordGroup:
		//	"keywords" token=[ScannerToken] "[" keywords+=Keyword ("," keywords+=Keyword)* "]";
		public ParserRule getRule() { return rule; }

		//"keywords" token=[ScannerToken] "[" keywords+=Keyword ("," keywords+=Keyword)* "]"
		public Group getGroup() { return cGroup; }

		//"keywords"
		public Keyword getKeywordsKeyword_0() { return cKeywordsKeyword_0; }

		//token=[ScannerToken]
		public Assignment getTokenAssignment_1() { return cTokenAssignment_1; }

		//[ScannerToken]
		public CrossReference getTokenScannerTokenCrossReference_1_0() { return cTokenScannerTokenCrossReference_1_0; }

		//ID
		public RuleCall getTokenScannerTokenIDTerminalRuleCall_1_0_1() { return cTokenScannerTokenIDTerminalRuleCall_1_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//keywords+=Keyword
		public Assignment getKeywordsAssignment_3() { return cKeywordsAssignment_3; }

		//Keyword
		public RuleCall getKeywordsKeywordParserRuleCall_3_0() { return cKeywordsKeywordParserRuleCall_3_0; }

		//("," keywords+=Keyword)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//keywords+=Keyword
		public Assignment getKeywordsAssignment_4_1() { return cKeywordsAssignment_4_1; }

		//Keyword
		public RuleCall getKeywordsKeywordParserRuleCall_4_1_0() { return cKeywordsKeywordParserRuleCall_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class KeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Keyword");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSinceKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVersionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVersionSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cVersionAssignment_1_1.eContents().get(0);
		
		//Keyword:
		//	name=STRING ("since" version=STRING)?;
		public ParserRule getRule() { return rule; }

		//name=STRING ("since" version=STRING)?
		public Group getGroup() { return cGroup; }

		//name=STRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }

		//("since" version=STRING)?
		public Group getGroup_1() { return cGroup_1; }

		//"since"
		public Keyword getSinceKeyword_1_0() { return cSinceKeyword_1_0; }

		//version=STRING
		public Assignment getVersionAssignment_1_1() { return cVersionAssignment_1_1; }

		//STRING
		public RuleCall getVersionSTRINGTerminalRuleCall_1_1_0() { return cVersionSTRINGTerminalRuleCall_1_1_0; }
	}

	public class ScannerRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScannerRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cScannerSingleLineRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cScannerMultiLineRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cScannerCharacterRuleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cScannerJSRuleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cScannerWhitespaceRuleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//ScannerRule:
		//	ScannerSingleLineRule | ScannerMultiLineRule | ScannerCharacterRule | ScannerJSRule | ScannerWhitespaceRule;
		public ParserRule getRule() { return rule; }

		//ScannerSingleLineRule | ScannerMultiLineRule | ScannerCharacterRule | ScannerJSRule | ScannerWhitespaceRule
		public Alternatives getAlternatives() { return cAlternatives; }

		//ScannerSingleLineRule
		public RuleCall getScannerSingleLineRuleParserRuleCall_0() { return cScannerSingleLineRuleParserRuleCall_0; }

		//ScannerMultiLineRule
		public RuleCall getScannerMultiLineRuleParserRuleCall_1() { return cScannerMultiLineRuleParserRuleCall_1; }

		//ScannerCharacterRule
		public RuleCall getScannerCharacterRuleParserRuleCall_2() { return cScannerCharacterRuleParserRuleCall_2; }

		//ScannerJSRule
		public RuleCall getScannerJSRuleParserRuleCall_3() { return cScannerJSRuleParserRuleCall_3; }

		//ScannerWhitespaceRule
		public RuleCall getScannerWhitespaceRuleParserRuleCall_4() { return cScannerWhitespaceRuleParserRuleCall_4; }
	}

	public class ParitionRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParitionRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPartitionSingleLineRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPartitionMultiLineRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPartitionJSRuleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ParitionRule:
		//	PartitionSingleLineRule | PartitionMultiLineRule | PartitionJSRule;
		public ParserRule getRule() { return rule; }

		//PartitionSingleLineRule | PartitionMultiLineRule | PartitionJSRule
		public Alternatives getAlternatives() { return cAlternatives; }

		//PartitionSingleLineRule
		public RuleCall getPartitionSingleLineRuleParserRuleCall_0() { return cPartitionSingleLineRuleParserRuleCall_0; }

		//PartitionMultiLineRule
		public RuleCall getPartitionMultiLineRuleParserRuleCall_1() { return cPartitionMultiLineRuleParserRuleCall_1; }

		//PartitionJSRule
		public RuleCall getPartitionJSRuleParserRuleCall_2() { return cPartitionJSRuleParserRuleCall_2; }
	}

	public class ScannerSingleLineRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScannerSingleLineRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSingleLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTokenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTokenScannerTokenCrossReference_1_0 = (CrossReference)cTokenAssignment_1.eContents().get(0);
		private final RuleCall cTokenScannerTokenIDTerminalRuleCall_1_0_1 = (RuleCall)cTokenScannerTokenCrossReference_1_0.eContents().get(1);
		private final Assignment cStartSeqAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStartSeqSTRINGTerminalRuleCall_2_0 = (RuleCall)cStartSeqAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEndSeqAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEndSeqSTRINGTerminalRuleCall_4_0 = (RuleCall)cEndSeqAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEscapedKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cByKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cEscapeSeqAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cEscapeSeqSTRINGTerminalRuleCall_5_2_0 = (RuleCall)cEscapeSeqAssignment_5_2.eContents().get(0);
		
		//ScannerSingleLineRule:
		//	"single-line" token=[ScannerToken] startSeq=STRING "=>" endSeq=STRING ("escaped" "by" escapeSeq=STRING)?;
		public ParserRule getRule() { return rule; }

		//"single-line" token=[ScannerToken] startSeq=STRING "=>" endSeq=STRING ("escaped" "by" escapeSeq=STRING)?
		public Group getGroup() { return cGroup; }

		//"single-line"
		public Keyword getSingleLineKeyword_0() { return cSingleLineKeyword_0; }

		//token=[ScannerToken]
		public Assignment getTokenAssignment_1() { return cTokenAssignment_1; }

		//[ScannerToken]
		public CrossReference getTokenScannerTokenCrossReference_1_0() { return cTokenScannerTokenCrossReference_1_0; }

		//ID
		public RuleCall getTokenScannerTokenIDTerminalRuleCall_1_0_1() { return cTokenScannerTokenIDTerminalRuleCall_1_0_1; }

		//startSeq=STRING
		public Assignment getStartSeqAssignment_2() { return cStartSeqAssignment_2; }

		//STRING
		public RuleCall getStartSeqSTRINGTerminalRuleCall_2_0() { return cStartSeqSTRINGTerminalRuleCall_2_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignGreaterThanSignKeyword_3; }

		//endSeq=STRING
		public Assignment getEndSeqAssignment_4() { return cEndSeqAssignment_4; }

		//STRING
		public RuleCall getEndSeqSTRINGTerminalRuleCall_4_0() { return cEndSeqSTRINGTerminalRuleCall_4_0; }

		//("escaped" "by" escapeSeq=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//"escaped"
		public Keyword getEscapedKeyword_5_0() { return cEscapedKeyword_5_0; }

		//"by"
		public Keyword getByKeyword_5_1() { return cByKeyword_5_1; }

		//escapeSeq=STRING
		public Assignment getEscapeSeqAssignment_5_2() { return cEscapeSeqAssignment_5_2; }

		//STRING
		public RuleCall getEscapeSeqSTRINGTerminalRuleCall_5_2_0() { return cEscapeSeqSTRINGTerminalRuleCall_5_2_0; }
	}

	public class PartitionSingleLineRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PartitionSingleLineRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSingleLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cParitionPartitionCrossReference_1_0 = (CrossReference)cParitionAssignment_1.eContents().get(0);
		private final RuleCall cParitionPartitionIDTerminalRuleCall_1_0_1 = (RuleCall)cParitionPartitionCrossReference_1_0.eContents().get(1);
		private final Assignment cStartSeqAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStartSeqSTRINGTerminalRuleCall_2_0 = (RuleCall)cStartSeqAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEndSeqAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEndSeqSTRINGTerminalRuleCall_4_0 = (RuleCall)cEndSeqAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEscapedKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cByKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cEscapeSeqAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cEscapeSeqSTRINGTerminalRuleCall_5_2_0 = (RuleCall)cEscapeSeqAssignment_5_2.eContents().get(0);
		
		//PartitionSingleLineRule:
		//	"single-line" parition=[Partition] startSeq=STRING "=>" endSeq=STRING ("escaped" "by" escapeSeq=STRING)?;
		public ParserRule getRule() { return rule; }

		//"single-line" parition=[Partition] startSeq=STRING "=>" endSeq=STRING ("escaped" "by" escapeSeq=STRING)?
		public Group getGroup() { return cGroup; }

		//"single-line"
		public Keyword getSingleLineKeyword_0() { return cSingleLineKeyword_0; }

		//parition=[Partition]
		public Assignment getParitionAssignment_1() { return cParitionAssignment_1; }

		//[Partition]
		public CrossReference getParitionPartitionCrossReference_1_0() { return cParitionPartitionCrossReference_1_0; }

		//ID
		public RuleCall getParitionPartitionIDTerminalRuleCall_1_0_1() { return cParitionPartitionIDTerminalRuleCall_1_0_1; }

		//startSeq=STRING
		public Assignment getStartSeqAssignment_2() { return cStartSeqAssignment_2; }

		//STRING
		public RuleCall getStartSeqSTRINGTerminalRuleCall_2_0() { return cStartSeqSTRINGTerminalRuleCall_2_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignGreaterThanSignKeyword_3; }

		//endSeq=STRING
		public Assignment getEndSeqAssignment_4() { return cEndSeqAssignment_4; }

		//STRING
		public RuleCall getEndSeqSTRINGTerminalRuleCall_4_0() { return cEndSeqSTRINGTerminalRuleCall_4_0; }

		//("escaped" "by" escapeSeq=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//"escaped"
		public Keyword getEscapedKeyword_5_0() { return cEscapedKeyword_5_0; }

		//"by"
		public Keyword getByKeyword_5_1() { return cByKeyword_5_1; }

		//escapeSeq=STRING
		public Assignment getEscapeSeqAssignment_5_2() { return cEscapeSeqAssignment_5_2; }

		//STRING
		public RuleCall getEscapeSeqSTRINGTerminalRuleCall_5_2_0() { return cEscapeSeqSTRINGTerminalRuleCall_5_2_0; }
	}

	public class ScannerMultiLineRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScannerMultiLineRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMultiLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTokenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTokenScannerTokenCrossReference_1_0 = (CrossReference)cTokenAssignment_1.eContents().get(0);
		private final RuleCall cTokenScannerTokenIDTerminalRuleCall_1_0_1 = (RuleCall)cTokenScannerTokenCrossReference_1_0.eContents().get(1);
		private final Assignment cStartSeqAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStartSeqSTRINGTerminalRuleCall_2_0 = (RuleCall)cStartSeqAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEndSeqAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEndSeqSTRINGTerminalRuleCall_4_0 = (RuleCall)cEndSeqAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEscapedKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cByKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cEscapeSeqAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cEscapeSeqSTRINGTerminalRuleCall_5_2_0 = (RuleCall)cEscapeSeqAssignment_5_2.eContents().get(0);
		
		//ScannerMultiLineRule:
		//	"multi-line" token=[ScannerToken] startSeq=STRING "=>" endSeq=STRING ("escaped" "by" escapeSeq=STRING)?;
		public ParserRule getRule() { return rule; }

		//"multi-line" token=[ScannerToken] startSeq=STRING "=>" endSeq=STRING ("escaped" "by" escapeSeq=STRING)?
		public Group getGroup() { return cGroup; }

		//"multi-line"
		public Keyword getMultiLineKeyword_0() { return cMultiLineKeyword_0; }

		//token=[ScannerToken]
		public Assignment getTokenAssignment_1() { return cTokenAssignment_1; }

		//[ScannerToken]
		public CrossReference getTokenScannerTokenCrossReference_1_0() { return cTokenScannerTokenCrossReference_1_0; }

		//ID
		public RuleCall getTokenScannerTokenIDTerminalRuleCall_1_0_1() { return cTokenScannerTokenIDTerminalRuleCall_1_0_1; }

		//startSeq=STRING
		public Assignment getStartSeqAssignment_2() { return cStartSeqAssignment_2; }

		//STRING
		public RuleCall getStartSeqSTRINGTerminalRuleCall_2_0() { return cStartSeqSTRINGTerminalRuleCall_2_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignGreaterThanSignKeyword_3; }

		//endSeq=STRING
		public Assignment getEndSeqAssignment_4() { return cEndSeqAssignment_4; }

		//STRING
		public RuleCall getEndSeqSTRINGTerminalRuleCall_4_0() { return cEndSeqSTRINGTerminalRuleCall_4_0; }

		//("escaped" "by" escapeSeq=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//"escaped"
		public Keyword getEscapedKeyword_5_0() { return cEscapedKeyword_5_0; }

		//"by"
		public Keyword getByKeyword_5_1() { return cByKeyword_5_1; }

		//escapeSeq=STRING
		public Assignment getEscapeSeqAssignment_5_2() { return cEscapeSeqAssignment_5_2; }

		//STRING
		public RuleCall getEscapeSeqSTRINGTerminalRuleCall_5_2_0() { return cEscapeSeqSTRINGTerminalRuleCall_5_2_0; }
	}

	public class PartitionMultiLineRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PartitionMultiLineRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMultiLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cParitionPartitionCrossReference_1_0 = (CrossReference)cParitionAssignment_1.eContents().get(0);
		private final RuleCall cParitionPartitionIDTerminalRuleCall_1_0_1 = (RuleCall)cParitionPartitionCrossReference_1_0.eContents().get(1);
		private final Assignment cStartSeqAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStartSeqSTRINGTerminalRuleCall_2_0 = (RuleCall)cStartSeqAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEndSeqAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEndSeqSTRINGTerminalRuleCall_4_0 = (RuleCall)cEndSeqAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEscapedKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cByKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cEscapeSeqAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cEscapeSeqSTRINGTerminalRuleCall_5_2_0 = (RuleCall)cEscapeSeqAssignment_5_2.eContents().get(0);
		
		//PartitionMultiLineRule:
		//	"multi-line" parition=[Partition] startSeq=STRING "=>" endSeq=STRING ("escaped" "by" escapeSeq=STRING)?;
		public ParserRule getRule() { return rule; }

		//"multi-line" parition=[Partition] startSeq=STRING "=>" endSeq=STRING ("escaped" "by" escapeSeq=STRING)?
		public Group getGroup() { return cGroup; }

		//"multi-line"
		public Keyword getMultiLineKeyword_0() { return cMultiLineKeyword_0; }

		//parition=[Partition]
		public Assignment getParitionAssignment_1() { return cParitionAssignment_1; }

		//[Partition]
		public CrossReference getParitionPartitionCrossReference_1_0() { return cParitionPartitionCrossReference_1_0; }

		//ID
		public RuleCall getParitionPartitionIDTerminalRuleCall_1_0_1() { return cParitionPartitionIDTerminalRuleCall_1_0_1; }

		//startSeq=STRING
		public Assignment getStartSeqAssignment_2() { return cStartSeqAssignment_2; }

		//STRING
		public RuleCall getStartSeqSTRINGTerminalRuleCall_2_0() { return cStartSeqSTRINGTerminalRuleCall_2_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignGreaterThanSignKeyword_3; }

		//endSeq=STRING
		public Assignment getEndSeqAssignment_4() { return cEndSeqAssignment_4; }

		//STRING
		public RuleCall getEndSeqSTRINGTerminalRuleCall_4_0() { return cEndSeqSTRINGTerminalRuleCall_4_0; }

		//("escaped" "by" escapeSeq=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//"escaped"
		public Keyword getEscapedKeyword_5_0() { return cEscapedKeyword_5_0; }

		//"by"
		public Keyword getByKeyword_5_1() { return cByKeyword_5_1; }

		//escapeSeq=STRING
		public Assignment getEscapeSeqAssignment_5_2() { return cEscapeSeqAssignment_5_2; }

		//STRING
		public RuleCall getEscapeSeqSTRINGTerminalRuleCall_5_2_0() { return cEscapeSeqSTRINGTerminalRuleCall_5_2_0; }
	}

	public class ScannerCharacterRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScannerCharacterRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCharacterRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTokenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTokenScannerTokenCrossReference_1_0 = (CrossReference)cTokenAssignment_1.eContents().get(0);
		private final RuleCall cTokenScannerTokenIDTerminalRuleCall_1_0_1 = (RuleCall)cTokenScannerTokenCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCharactersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCharactersSTRINGTerminalRuleCall_3_0 = (RuleCall)cCharactersAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCharactersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCharactersSTRINGTerminalRuleCall_5_0 = (RuleCall)cCharactersAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ScannerCharacterRule:
		//	"character-rule" token=[ScannerToken] "[" characters+=STRING "," characters+=STRING "]";
		public ParserRule getRule() { return rule; }

		//"character-rule" token=[ScannerToken] "[" characters+=STRING "," characters+=STRING "]"
		public Group getGroup() { return cGroup; }

		//"character-rule"
		public Keyword getCharacterRuleKeyword_0() { return cCharacterRuleKeyword_0; }

		//token=[ScannerToken]
		public Assignment getTokenAssignment_1() { return cTokenAssignment_1; }

		//[ScannerToken]
		public CrossReference getTokenScannerTokenCrossReference_1_0() { return cTokenScannerTokenCrossReference_1_0; }

		//ID
		public RuleCall getTokenScannerTokenIDTerminalRuleCall_1_0_1() { return cTokenScannerTokenIDTerminalRuleCall_1_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//characters+=STRING
		public Assignment getCharactersAssignment_3() { return cCharactersAssignment_3; }

		//STRING
		public RuleCall getCharactersSTRINGTerminalRuleCall_3_0() { return cCharactersSTRINGTerminalRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//characters+=STRING
		public Assignment getCharactersAssignment_5() { return cCharactersAssignment_5; }

		//STRING
		public RuleCall getCharactersSTRINGTerminalRuleCall_5_0() { return cCharactersSTRINGTerminalRuleCall_5_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}

	public class ScannerJSRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScannerJSRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJavascriptRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTokenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTokenScannerTokenCrossReference_1_0 = (CrossReference)cTokenAssignment_1.eContents().get(0);
		private final RuleCall cTokenScannerTokenIDTerminalRuleCall_1_0_1 = (RuleCall)cTokenScannerTokenCrossReference_1_0.eContents().get(1);
		private final Assignment cFileURIAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFileURISTRINGTerminalRuleCall_2_0 = (RuleCall)cFileURIAssignment_2.eContents().get(0);
		
		//ScannerJSRule:
		//	"javascript-rule" token=[ScannerToken] fileURI=STRING;
		public ParserRule getRule() { return rule; }

		//"javascript-rule" token=[ScannerToken] fileURI=STRING
		public Group getGroup() { return cGroup; }

		//"javascript-rule"
		public Keyword getJavascriptRuleKeyword_0() { return cJavascriptRuleKeyword_0; }

		//token=[ScannerToken]
		public Assignment getTokenAssignment_1() { return cTokenAssignment_1; }

		//[ScannerToken]
		public CrossReference getTokenScannerTokenCrossReference_1_0() { return cTokenScannerTokenCrossReference_1_0; }

		//ID
		public RuleCall getTokenScannerTokenIDTerminalRuleCall_1_0_1() { return cTokenScannerTokenIDTerminalRuleCall_1_0_1; }

		//fileURI=STRING
		public Assignment getFileURIAssignment_2() { return cFileURIAssignment_2; }

		//STRING
		public RuleCall getFileURISTRINGTerminalRuleCall_2_0() { return cFileURISTRINGTerminalRuleCall_2_0; }
	}

	public class PartitionJSRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PartitionJSRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJavascriptRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTokenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTokenPartitionCrossReference_1_0 = (CrossReference)cTokenAssignment_1.eContents().get(0);
		private final RuleCall cTokenPartitionIDTerminalRuleCall_1_0_1 = (RuleCall)cTokenPartitionCrossReference_1_0.eContents().get(1);
		private final Assignment cFileURIAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFileURISTRINGTerminalRuleCall_2_0 = (RuleCall)cFileURIAssignment_2.eContents().get(0);
		
		//PartitionJSRule:
		//	"javascript-rule" token=[Partition] fileURI=STRING;
		public ParserRule getRule() { return rule; }

		//"javascript-rule" token=[Partition] fileURI=STRING
		public Group getGroup() { return cGroup; }

		//"javascript-rule"
		public Keyword getJavascriptRuleKeyword_0() { return cJavascriptRuleKeyword_0; }

		//token=[Partition]
		public Assignment getTokenAssignment_1() { return cTokenAssignment_1; }

		//[Partition]
		public CrossReference getTokenPartitionCrossReference_1_0() { return cTokenPartitionCrossReference_1_0; }

		//ID
		public RuleCall getTokenPartitionIDTerminalRuleCall_1_0_1() { return cTokenPartitionIDTerminalRuleCall_1_0_1; }

		//fileURI=STRING
		public Assignment getFileURIAssignment_2() { return cFileURIAssignment_2; }

		//STRING
		public RuleCall getFileURISTRINGTerminalRuleCall_2_0() { return cFileURISTRINGTerminalRuleCall_2_0; }
	}

	public class ScannerWhitespaceRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScannerWhitespaceRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cWhitespaceRuleKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTokenAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cTokenScannerTokenCrossReference_0_1_0 = (CrossReference)cTokenAssignment_0_1.eContents().get(0);
		private final RuleCall cTokenScannerTokenIDTerminalRuleCall_0_1_0_1 = (RuleCall)cTokenScannerTokenCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cCharactersAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cCharactersSTRINGTerminalRuleCall_0_2_1_0 = (RuleCall)cCharactersAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_0_2_2 = (Group)cGroup_0_2.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_2_0 = (Keyword)cGroup_0_2_2.eContents().get(0);
		private final Assignment cCharactersAssignment_0_2_2_1 = (Assignment)cGroup_0_2_2.eContents().get(1);
		private final RuleCall cCharactersSTRINGTerminalRuleCall_0_2_2_1_0 = (RuleCall)cCharactersAssignment_0_2_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_2_3 = (Keyword)cGroup_0_2.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cNumberSignLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cJsDetectorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cJsDetectorANY_OTHERTerminalRuleCall_1_1_0 = (RuleCall)cJsDetectorAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketNumberSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ScannerWhitespaceRule:
		//	"whitespace-rule" token=[ScannerToken]? ("[" characters+=STRING ("," characters+=STRING)* "]") | "#{"
		//	jsDetector=ANY_OTHER "}#";
		public ParserRule getRule() { return rule; }

		//"whitespace-rule" token=[ScannerToken]? ("[" characters+=STRING ("," characters+=STRING)* "]") | "#{"
		//jsDetector=ANY_OTHER "}#"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"whitespace-rule" token=[ScannerToken]? ("[" characters+=STRING ("," characters+=STRING)* "]")
		public Group getGroup_0() { return cGroup_0; }

		//"whitespace-rule"
		public Keyword getWhitespaceRuleKeyword_0_0() { return cWhitespaceRuleKeyword_0_0; }

		//token=[ScannerToken]?
		public Assignment getTokenAssignment_0_1() { return cTokenAssignment_0_1; }

		//[ScannerToken]
		public CrossReference getTokenScannerTokenCrossReference_0_1_0() { return cTokenScannerTokenCrossReference_0_1_0; }

		//ID
		public RuleCall getTokenScannerTokenIDTerminalRuleCall_0_1_0_1() { return cTokenScannerTokenIDTerminalRuleCall_0_1_0_1; }

		//"[" characters+=STRING ("," characters+=STRING)* "]"
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_2_0() { return cLeftSquareBracketKeyword_0_2_0; }

		//characters+=STRING
		public Assignment getCharactersAssignment_0_2_1() { return cCharactersAssignment_0_2_1; }

		//STRING
		public RuleCall getCharactersSTRINGTerminalRuleCall_0_2_1_0() { return cCharactersSTRINGTerminalRuleCall_0_2_1_0; }

		//("," characters+=STRING)*
		public Group getGroup_0_2_2() { return cGroup_0_2_2; }

		//","
		public Keyword getCommaKeyword_0_2_2_0() { return cCommaKeyword_0_2_2_0; }

		//characters+=STRING
		public Assignment getCharactersAssignment_0_2_2_1() { return cCharactersAssignment_0_2_2_1; }

		//STRING
		public RuleCall getCharactersSTRINGTerminalRuleCall_0_2_2_1_0() { return cCharactersSTRINGTerminalRuleCall_0_2_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_2_3() { return cRightSquareBracketKeyword_0_2_3; }

		//"#{" jsDetector=ANY_OTHER "}#"
		public Group getGroup_1() { return cGroup_1; }

		//"#{"
		public Keyword getNumberSignLeftCurlyBracketKeyword_1_0() { return cNumberSignLeftCurlyBracketKeyword_1_0; }

		//jsDetector=ANY_OTHER
		public Assignment getJsDetectorAssignment_1_1() { return cJsDetectorAssignment_1_1; }

		//ANY_OTHER
		public RuleCall getJsDetectorANY_OTHERTerminalRuleCall_1_1_0() { return cJsDetectorANY_OTHERTerminalRuleCall_1_1_0; }

		//"}#"
		public Keyword getRightCurlyBracketNumberSignKeyword_1_2() { return cRightCurlyBracketNumberSignKeyword_1_2; }
	}

	public class ColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Color");
		private final RuleCall cRGBColorParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Color:
		//	RGBColor;
		public ParserRule getRule() { return rule; }

		//RGBColor
		public RuleCall getRGBColorParserRuleCall() { return cRGBColorParserRuleCall; }
	}

	public class RGBColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RGBColor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRgbKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRINTTerminalRuleCall_2_0 = (RuleCall)cRAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGINTTerminalRuleCall_4_0 = (RuleCall)cGAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBINTTerminalRuleCall_6_0 = (RuleCall)cBAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//RGBColor:
		//	"rgb" "(" r=INT "," g=INT "," b=INT ")";
		public ParserRule getRule() { return rule; }

		//"rgb" "(" r=INT "," g=INT "," b=INT ")"
		public Group getGroup() { return cGroup; }

		//"rgb"
		public Keyword getRgbKeyword_0() { return cRgbKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//r=INT
		public Assignment getRAssignment_2() { return cRAssignment_2; }

		//INT
		public RuleCall getRINTTerminalRuleCall_2_0() { return cRINTTerminalRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//g=INT
		public Assignment getGAssignment_4() { return cGAssignment_4; }

		//INT
		public RuleCall getGINTTerminalRuleCall_4_0() { return cGINTTerminalRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//b=INT
		public Assignment getBAssignment_6() { return cBAssignment_6; }

		//INT
		public RuleCall getBINTTerminalRuleCall_6_0() { return cBINTTerminalRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class FontElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Font");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cSizeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSizeINTTerminalRuleCall_1_0 = (RuleCall)cSizeAssignment_1.eContents().get(0);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesFontTypeEnumRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		
		//Font:
		//	name=ID size=INT attributes+=FontType*;
		public ParserRule getRule() { return rule; }

		//name=ID size=INT attributes+=FontType*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//size=INT
		public Assignment getSizeAssignment_1() { return cSizeAssignment_1; }

		//INT
		public RuleCall getSizeINTTerminalRuleCall_1_0() { return cSizeINTTerminalRuleCall_1_0; }

		//attributes+=FontType*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//FontType
		public RuleCall getAttributesFontTypeEnumRuleCall_2_0() { return cAttributesFontTypeEnumRuleCall_2_0; }
	}
	
	
	public class FontTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FontType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBoldEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBoldBoldKeyword_0_0 = (Keyword)cBoldEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cItalicEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cItalicItalicKeyword_1_0 = (Keyword)cItalicEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUnderlineEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUnderlineUnderlineKeyword_2_0 = (Keyword)cUnderlineEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cStrike_throughEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cStrike_throughStrikeThroughKeyword_3_0 = (Keyword)cStrike_throughEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum FontType:
		//	bold | italic | underline | strike_through="strike-through";
		public EnumRule getRule() { return rule; }

		//bold | italic | underline | strike_through="strike-through"
		public Alternatives getAlternatives() { return cAlternatives; }

		//bold
		public EnumLiteralDeclaration getBoldEnumLiteralDeclaration_0() { return cBoldEnumLiteralDeclaration_0; }

		//"bold"
		public Keyword getBoldBoldKeyword_0_0() { return cBoldBoldKeyword_0_0; }

		//italic
		public EnumLiteralDeclaration getItalicEnumLiteralDeclaration_1() { return cItalicEnumLiteralDeclaration_1; }

		//"italic"
		public Keyword getItalicItalicKeyword_1_0() { return cItalicItalicKeyword_1_0; }

		//underline
		public EnumLiteralDeclaration getUnderlineEnumLiteralDeclaration_2() { return cUnderlineEnumLiteralDeclaration_2; }

		//"underline"
		public Keyword getUnderlineUnderlineKeyword_2_0() { return cUnderlineUnderlineKeyword_2_0; }

		//strike_through="strike-through"
		public EnumLiteralDeclaration getStrike_throughEnumLiteralDeclaration_3() { return cStrike_throughEnumLiteralDeclaration_3; }

		//"strike-through"
		public Keyword getStrike_throughStrikeThroughKeyword_3_0() { return cStrike_throughStrikeThroughKeyword_3_0; }
	}
	
	private ModelElements pModel;
	private PartitionElements pPartition;
	private PartitionerElements pPartitioner;
	private RulePartitionerElements pRulePartitioner;
	private JSParitionerElements pJSParitioner;
	private DamagerElements pDamager;
	private JSDamagerElements pJSDamager;
	private RuleDamagerElements pRuleDamager;
	private ScannerTokenElements pScannerToken;
	private KeywordGroupElements pKeywordGroup;
	private KeywordElements pKeyword;
	private ScannerRuleElements pScannerRule;
	private ParitionRuleElements pParitionRule;
	private ScannerSingleLineRuleElements pScannerSingleLineRule;
	private PartitionSingleLineRuleElements pPartitionSingleLineRule;
	private ScannerMultiLineRuleElements pScannerMultiLineRule;
	private PartitionMultiLineRuleElements pPartitionMultiLineRule;
	private ScannerCharacterRuleElements pScannerCharacterRule;
	private ScannerJSRuleElements pScannerJSRule;
	private PartitionJSRuleElements pPartitionJSRule;
	private ScannerWhitespaceRuleElements pScannerWhitespaceRule;
	private ColorElements pColor;
	private RGBColorElements pRGBColor;
	private FontElements pFont;
	private FontTypeElements unknownRuleFontType;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public HSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.fx.code.compensator.hsl.HSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	name=ID "{" partitions+=Partition+ damagers+=Damager+ partitioner=Partitioner "}";
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Partition:
	//	"partition" name=ID;
	public PartitionElements getPartitionAccess() {
		return (pPartition != null) ? pPartition : (pPartition = new PartitionElements());
	}
	
	public ParserRule getPartitionRule() {
		return getPartitionAccess().getRule();
	}

	//Partitioner:
	//	RulePartitioner | JSParitioner;
	public PartitionerElements getPartitionerAccess() {
		return (pPartitioner != null) ? pPartitioner : (pPartitioner = new PartitionerElements());
	}
	
	public ParserRule getPartitionerRule() {
		return getPartitionerAccess().getRule();
	}

	//RulePartitioner:
	//	"rule-partitioner" "{" rules+=ParitionRule+ "}";
	public RulePartitionerElements getRulePartitionerAccess() {
		return (pRulePartitioner != null) ? pRulePartitioner : (pRulePartitioner = new RulePartitionerElements());
	}
	
	public ParserRule getRulePartitionerRule() {
		return getRulePartitionerAccess().getRule();
	}

	//JSParitioner:
	//	"js-partitioner" fileURI=STRING;
	public JSParitionerElements getJSParitionerAccess() {
		return (pJSParitioner != null) ? pJSParitioner : (pJSParitioner = new JSParitionerElements());
	}
	
	public ParserRule getJSParitionerRule() {
		return getJSParitionerAccess().getRule();
	}

	//Damager:
	//	RuleDamager | JSDamager;
	public DamagerElements getDamagerAccess() {
		return (pDamager != null) ? pDamager : (pDamager = new DamagerElements());
	}
	
	public ParserRule getDamagerRule() {
		return getDamagerAccess().getRule();
	}

	//JSDamager:
	//	"js-damager" partition=[Partition] fileURI=STRING;
	public JSDamagerElements getJSDamagerAccess() {
		return (pJSDamager != null) ? pJSDamager : (pJSDamager = new JSDamagerElements());
	}
	
	public ParserRule getJSDamagerRule() {
		return getJSDamagerAccess().getRule();
	}

	//RuleDamager:
	//	"rule-damager" partition=[Partition] "{" tokens+=ScannerToken* keywordGroups+=KeywordGroup* rules+=ScannerRule+ "}";
	public RuleDamagerElements getRuleDamagerAccess() {
		return (pRuleDamager != null) ? pRuleDamager : (pRuleDamager = new RuleDamagerElements());
	}
	
	public ParserRule getRuleDamagerRule() {
		return getRuleDamagerAccess().getRule();
	}

	//ScannerToken:
	//	default?="default"? "token" name=ID ("{" ("fgcolor" ":" fgColor=Color)? ("bgcolor" ":" bgColor=Color)? ("font" ":"
	//	font=Font)? "}")?;
	public ScannerTokenElements getScannerTokenAccess() {
		return (pScannerToken != null) ? pScannerToken : (pScannerToken = new ScannerTokenElements());
	}
	
	public ParserRule getScannerTokenRule() {
		return getScannerTokenAccess().getRule();
	}

	//KeywordGroup:
	//	"keywords" token=[ScannerToken] "[" keywords+=Keyword ("," keywords+=Keyword)* "]";
	public KeywordGroupElements getKeywordGroupAccess() {
		return (pKeywordGroup != null) ? pKeywordGroup : (pKeywordGroup = new KeywordGroupElements());
	}
	
	public ParserRule getKeywordGroupRule() {
		return getKeywordGroupAccess().getRule();
	}

	//Keyword:
	//	name=STRING ("since" version=STRING)?;
	public KeywordElements getKeywordAccess() {
		return (pKeyword != null) ? pKeyword : (pKeyword = new KeywordElements());
	}
	
	public ParserRule getKeywordRule() {
		return getKeywordAccess().getRule();
	}

	//ScannerRule:
	//	ScannerSingleLineRule | ScannerMultiLineRule | ScannerCharacterRule | ScannerJSRule | ScannerWhitespaceRule;
	public ScannerRuleElements getScannerRuleAccess() {
		return (pScannerRule != null) ? pScannerRule : (pScannerRule = new ScannerRuleElements());
	}
	
	public ParserRule getScannerRuleRule() {
		return getScannerRuleAccess().getRule();
	}

	//ParitionRule:
	//	PartitionSingleLineRule | PartitionMultiLineRule | PartitionJSRule;
	public ParitionRuleElements getParitionRuleAccess() {
		return (pParitionRule != null) ? pParitionRule : (pParitionRule = new ParitionRuleElements());
	}
	
	public ParserRule getParitionRuleRule() {
		return getParitionRuleAccess().getRule();
	}

	//ScannerSingleLineRule:
	//	"single-line" token=[ScannerToken] startSeq=STRING "=>" endSeq=STRING ("escaped" "by" escapeSeq=STRING)?;
	public ScannerSingleLineRuleElements getScannerSingleLineRuleAccess() {
		return (pScannerSingleLineRule != null) ? pScannerSingleLineRule : (pScannerSingleLineRule = new ScannerSingleLineRuleElements());
	}
	
	public ParserRule getScannerSingleLineRuleRule() {
		return getScannerSingleLineRuleAccess().getRule();
	}

	//PartitionSingleLineRule:
	//	"single-line" parition=[Partition] startSeq=STRING "=>" endSeq=STRING ("escaped" "by" escapeSeq=STRING)?;
	public PartitionSingleLineRuleElements getPartitionSingleLineRuleAccess() {
		return (pPartitionSingleLineRule != null) ? pPartitionSingleLineRule : (pPartitionSingleLineRule = new PartitionSingleLineRuleElements());
	}
	
	public ParserRule getPartitionSingleLineRuleRule() {
		return getPartitionSingleLineRuleAccess().getRule();
	}

	//ScannerMultiLineRule:
	//	"multi-line" token=[ScannerToken] startSeq=STRING "=>" endSeq=STRING ("escaped" "by" escapeSeq=STRING)?;
	public ScannerMultiLineRuleElements getScannerMultiLineRuleAccess() {
		return (pScannerMultiLineRule != null) ? pScannerMultiLineRule : (pScannerMultiLineRule = new ScannerMultiLineRuleElements());
	}
	
	public ParserRule getScannerMultiLineRuleRule() {
		return getScannerMultiLineRuleAccess().getRule();
	}

	//PartitionMultiLineRule:
	//	"multi-line" parition=[Partition] startSeq=STRING "=>" endSeq=STRING ("escaped" "by" escapeSeq=STRING)?;
	public PartitionMultiLineRuleElements getPartitionMultiLineRuleAccess() {
		return (pPartitionMultiLineRule != null) ? pPartitionMultiLineRule : (pPartitionMultiLineRule = new PartitionMultiLineRuleElements());
	}
	
	public ParserRule getPartitionMultiLineRuleRule() {
		return getPartitionMultiLineRuleAccess().getRule();
	}

	//ScannerCharacterRule:
	//	"character-rule" token=[ScannerToken] "[" characters+=STRING "," characters+=STRING "]";
	public ScannerCharacterRuleElements getScannerCharacterRuleAccess() {
		return (pScannerCharacterRule != null) ? pScannerCharacterRule : (pScannerCharacterRule = new ScannerCharacterRuleElements());
	}
	
	public ParserRule getScannerCharacterRuleRule() {
		return getScannerCharacterRuleAccess().getRule();
	}

	//ScannerJSRule:
	//	"javascript-rule" token=[ScannerToken] fileURI=STRING;
	public ScannerJSRuleElements getScannerJSRuleAccess() {
		return (pScannerJSRule != null) ? pScannerJSRule : (pScannerJSRule = new ScannerJSRuleElements());
	}
	
	public ParserRule getScannerJSRuleRule() {
		return getScannerJSRuleAccess().getRule();
	}

	//PartitionJSRule:
	//	"javascript-rule" token=[Partition] fileURI=STRING;
	public PartitionJSRuleElements getPartitionJSRuleAccess() {
		return (pPartitionJSRule != null) ? pPartitionJSRule : (pPartitionJSRule = new PartitionJSRuleElements());
	}
	
	public ParserRule getPartitionJSRuleRule() {
		return getPartitionJSRuleAccess().getRule();
	}

	//ScannerWhitespaceRule:
	//	"whitespace-rule" token=[ScannerToken]? ("[" characters+=STRING ("," characters+=STRING)* "]") | "#{"
	//	jsDetector=ANY_OTHER "}#";
	public ScannerWhitespaceRuleElements getScannerWhitespaceRuleAccess() {
		return (pScannerWhitespaceRule != null) ? pScannerWhitespaceRule : (pScannerWhitespaceRule = new ScannerWhitespaceRuleElements());
	}
	
	public ParserRule getScannerWhitespaceRuleRule() {
		return getScannerWhitespaceRuleAccess().getRule();
	}

	//Color:
	//	RGBColor;
	public ColorElements getColorAccess() {
		return (pColor != null) ? pColor : (pColor = new ColorElements());
	}
	
	public ParserRule getColorRule() {
		return getColorAccess().getRule();
	}

	//RGBColor:
	//	"rgb" "(" r=INT "," g=INT "," b=INT ")";
	public RGBColorElements getRGBColorAccess() {
		return (pRGBColor != null) ? pRGBColor : (pRGBColor = new RGBColorElements());
	}
	
	public ParserRule getRGBColorRule() {
		return getRGBColorAccess().getRule();
	}

	//Font:
	//	name=ID size=INT attributes+=FontType*;
	public FontElements getFontAccess() {
		return (pFont != null) ? pFont : (pFont = new FontElements());
	}
	
	public ParserRule getFontRule() {
		return getFontAccess().getRule();
	}

	//enum FontType:
	//	bold | italic | underline | strike_through="strike-through";
	public FontTypeElements getFontTypeAccess() {
		return (unknownRuleFontType != null) ? unknownRuleFontType : (unknownRuleFontType = new FontTypeElements());
	}
	
	public EnumRule getFontTypeRule() {
		return getFontTypeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
