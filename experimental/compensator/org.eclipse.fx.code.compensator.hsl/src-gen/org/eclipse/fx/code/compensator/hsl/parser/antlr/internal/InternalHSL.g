/*
* generated by Xtext
*/
grammar InternalHSL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.fx.code.compensator.hsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.fx.code.compensator.hsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.fx.code.compensator.hsl.services.HSLGrammarAccess;

}

@parser::members {

 	private HSLGrammarAccess grammarAccess;
 	
    public InternalHSLParser(TokenStream input, HSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected HSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getModelAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getPartitionsPartitionParserRuleCall_2_0()); 
	    }
		lv_partitions_2_0=rulePartition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"partitions",
        		lv_partitions_2_0, 
        		"Partition");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getDamagersDamagerParserRuleCall_3_0()); 
	    }
		lv_damagers_3_0=ruleDamager		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"damagers",
        		lv_damagers_3_0, 
        		"Damager");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getPartitionerPartitionerParserRuleCall_4_0()); 
	    }
		lv_partitioner_4_0=rulePartitioner		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"partitioner",
        		lv_partitioner_4_0, 
        		"Partitioner");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getModelAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRulePartition
entryRulePartition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPartitionRule()); }
	 iv_rulePartition=rulePartition 
	 { $current=$iv_rulePartition.current; } 
	 EOF 
;

// Rule Partition
rulePartition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='partition' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPartitionAccess().getPartitionKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPartitionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPartitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRulePartitioner
entryRulePartitioner returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPartitionerRule()); }
	 iv_rulePartitioner=rulePartitioner 
	 { $current=$iv_rulePartitioner.current; } 
	 EOF 
;

// Rule Partitioner
rulePartitioner returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPartitionerAccess().getRulePartitionerParserRuleCall_0()); 
    }
    this_RulePartitioner_0=ruleRulePartitioner
    { 
        $current = $this_RulePartitioner_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPartitionerAccess().getJSParitionerParserRuleCall_1()); 
    }
    this_JSParitioner_1=ruleJSParitioner
    { 
        $current = $this_JSParitioner_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRulePartitioner
entryRuleRulePartitioner returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRulePartitionerRule()); }
	 iv_ruleRulePartitioner=ruleRulePartitioner 
	 { $current=$iv_ruleRulePartitioner.current; } 
	 EOF 
;

// Rule RulePartitioner
ruleRulePartitioner returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='rule-partitioner' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRulePartitionerAccess().getRulePartitionerKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRulePartitionerAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRulePartitionerAccess().getRulesParitionRuleParserRuleCall_2_0()); 
	    }
		lv_rules_2_0=ruleParitionRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRulePartitionerRule());
	        }
       		add(
       			$current, 
       			"rules",
        		lv_rules_2_0, 
        		"ParitionRule");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRulePartitionerAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleJSParitioner
entryRuleJSParitioner returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJSParitionerRule()); }
	 iv_ruleJSParitioner=ruleJSParitioner 
	 { $current=$iv_ruleJSParitioner.current; } 
	 EOF 
;

// Rule JSParitioner
ruleJSParitioner returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='js-partitioner' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJSParitionerAccess().getJsPartitionerKeyword_0());
    }
(
(
		lv_fileURI_1_0=RULE_STRING
		{
			newLeafNode(lv_fileURI_1_0, grammarAccess.getJSParitionerAccess().getFileURISTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJSParitionerRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"fileURI",
        		lv_fileURI_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleDamager
entryRuleDamager returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDamagerRule()); }
	 iv_ruleDamager=ruleDamager 
	 { $current=$iv_ruleDamager.current; } 
	 EOF 
;

// Rule Damager
ruleDamager returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDamagerAccess().getRuleDamagerParserRuleCall_0()); 
    }
    this_RuleDamager_0=ruleRuleDamager
    { 
        $current = $this_RuleDamager_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDamagerAccess().getJSDamagerParserRuleCall_1()); 
    }
    this_JSDamager_1=ruleJSDamager
    { 
        $current = $this_JSDamager_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleJSDamager
entryRuleJSDamager returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJSDamagerRule()); }
	 iv_ruleJSDamager=ruleJSDamager 
	 { $current=$iv_ruleJSDamager.current; } 
	 EOF 
;

// Rule JSDamager
ruleJSDamager returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='js-damager' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJSDamagerAccess().getJsDamagerKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getJSDamagerRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getJSDamagerAccess().getPartitionPartitionCrossReference_1_0()); 
	}

)
)(
(
		lv_fileURI_2_0=RULE_STRING
		{
			newLeafNode(lv_fileURI_2_0, grammarAccess.getJSDamagerAccess().getFileURISTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJSDamagerRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"fileURI",
        		lv_fileURI_2_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleRuleDamager
entryRuleRuleDamager returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleDamagerRule()); }
	 iv_ruleRuleDamager=ruleRuleDamager 
	 { $current=$iv_ruleRuleDamager.current; } 
	 EOF 
;

// Rule RuleDamager
ruleRuleDamager returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='rule-damager' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRuleDamagerAccess().getRuleDamagerKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleDamagerRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getRuleDamagerAccess().getPartitionPartitionCrossReference_1_0()); 
	}

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRuleDamagerAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDamagerAccess().getTokensScannerTokenParserRuleCall_3_0()); 
	    }
		lv_tokens_3_0=ruleScannerToken		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDamagerRule());
	        }
       		add(
       			$current, 
       			"tokens",
        		lv_tokens_3_0, 
        		"ScannerToken");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDamagerAccess().getKeywordGroupsKeywordGroupParserRuleCall_4_0()); 
	    }
		lv_keywordGroups_4_0=ruleKeywordGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDamagerRule());
	        }
       		add(
       			$current, 
       			"keywordGroups",
        		lv_keywordGroups_4_0, 
        		"KeywordGroup");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleDamagerAccess().getRulesScannerRuleParserRuleCall_5_0()); 
	    }
		lv_rules_5_0=ruleScannerRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleDamagerRule());
	        }
       		add(
       			$current, 
       			"rules",
        		lv_rules_5_0, 
        		"ScannerRule");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRuleDamagerAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleScannerToken
entryRuleScannerToken returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScannerTokenRule()); }
	 iv_ruleScannerToken=ruleScannerToken 
	 { $current=$iv_ruleScannerToken.current; } 
	 EOF 
;

// Rule ScannerToken
ruleScannerToken returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_default_0_0=	'default' 
    {
        newLeafNode(lv_default_0_0, grammarAccess.getScannerTokenAccess().getDefaultDefaultKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScannerTokenRule());
	        }
       		setWithLastConsumed($current, "default", true, "default");
	    }

)
)?	otherlv_1='token' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getScannerTokenAccess().getTokenKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getScannerTokenAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScannerTokenRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getScannerTokenAccess().getLeftCurlyBracketKeyword_3_0());
    }
(	otherlv_4='fgcolor' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getScannerTokenAccess().getFgcolorKeyword_3_1_0());
    }
	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getScannerTokenAccess().getColonKeyword_3_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getScannerTokenAccess().getFgColorColorParserRuleCall_3_1_2_0()); 
	    }
		lv_fgColor_6_0=ruleColor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScannerTokenRule());
	        }
       		set(
       			$current, 
       			"fgColor",
        		lv_fgColor_6_0, 
        		"Color");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_7='bgcolor' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getScannerTokenAccess().getBgcolorKeyword_3_2_0());
    }
	otherlv_8=':' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getScannerTokenAccess().getColonKeyword_3_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getScannerTokenAccess().getBgColorColorParserRuleCall_3_2_2_0()); 
	    }
		lv_bgColor_9_0=ruleColor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScannerTokenRule());
	        }
       		set(
       			$current, 
       			"bgColor",
        		lv_bgColor_9_0, 
        		"Color");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_10='font' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getScannerTokenAccess().getFontKeyword_3_3_0());
    }
	otherlv_11=':' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getScannerTokenAccess().getColonKeyword_3_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getScannerTokenAccess().getFontFontParserRuleCall_3_3_2_0()); 
	    }
		lv_font_12_0=ruleFont		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScannerTokenRule());
	        }
       		set(
       			$current, 
       			"font",
        		lv_font_12_0, 
        		"Font");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_13='}' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getScannerTokenAccess().getRightCurlyBracketKeyword_3_4());
    }
)?)
;





// Entry rule entryRuleKeywordGroup
entryRuleKeywordGroup returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeywordGroupRule()); }
	 iv_ruleKeywordGroup=ruleKeywordGroup 
	 { $current=$iv_ruleKeywordGroup.current; } 
	 EOF 
;

// Rule KeywordGroup
ruleKeywordGroup returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='keywords' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getKeywordGroupAccess().getKeywordsKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeywordGroupRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getKeywordGroupAccess().getTokenScannerTokenCrossReference_1_0()); 
	}

)
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getKeywordGroupAccess().getLeftSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeywordGroupAccess().getKeywordsKeywordParserRuleCall_3_0()); 
	    }
		lv_keywords_3_0=ruleKeyword		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeywordGroupRule());
	        }
       		add(
       			$current, 
       			"keywords",
        		lv_keywords_3_0, 
        		"Keyword");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getKeywordGroupAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeywordGroupAccess().getKeywordsKeywordParserRuleCall_4_1_0()); 
	    }
		lv_keywords_5_0=ruleKeyword		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeywordGroupRule());
	        }
       		add(
       			$current, 
       			"keywords",
        		lv_keywords_5_0, 
        		"Keyword");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getKeywordGroupAccess().getRightSquareBracketKeyword_5());
    }
)
;





// Entry rule entryRuleKeyword
entryRuleKeyword returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeywordRule()); }
	 iv_ruleKeyword=ruleKeyword 
	 { $current=$iv_ruleKeyword.current; } 
	 EOF 
;

// Rule Keyword
ruleKeyword returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_STRING
		{
			newLeafNode(lv_name_0_0, grammarAccess.getKeywordAccess().getNameSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeywordRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"STRING");
	    }

)
)(	otherlv_1='since' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getKeywordAccess().getSinceKeyword_1_0());
    }
(
(
		lv_version_2_0=RULE_STRING
		{
			newLeafNode(lv_version_2_0, grammarAccess.getKeywordAccess().getVersionSTRINGTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeywordRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"version",
        		lv_version_2_0, 
        		"STRING");
	    }

)
))?)
;





// Entry rule entryRuleScannerRule
entryRuleScannerRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScannerRuleRule()); }
	 iv_ruleScannerRule=ruleScannerRule 
	 { $current=$iv_ruleScannerRule.current; } 
	 EOF 
;

// Rule ScannerRule
ruleScannerRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getScannerRuleAccess().getScannerSingleLineRuleParserRuleCall_0()); 
    }
    this_ScannerSingleLineRule_0=ruleScannerSingleLineRule
    { 
        $current = $this_ScannerSingleLineRule_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getScannerRuleAccess().getScannerMultiLineRuleParserRuleCall_1()); 
    }
    this_ScannerMultiLineRule_1=ruleScannerMultiLineRule
    { 
        $current = $this_ScannerMultiLineRule_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getScannerRuleAccess().getScannerCharacterRuleParserRuleCall_2()); 
    }
    this_ScannerCharacterRule_2=ruleScannerCharacterRule
    { 
        $current = $this_ScannerCharacterRule_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getScannerRuleAccess().getScannerJSRuleParserRuleCall_3()); 
    }
    this_ScannerJSRule_3=ruleScannerJSRule
    { 
        $current = $this_ScannerJSRule_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getScannerRuleAccess().getScannerWhitespaceRuleParserRuleCall_4()); 
    }
    this_ScannerWhitespaceRule_4=ruleScannerWhitespaceRule
    { 
        $current = $this_ScannerWhitespaceRule_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleParitionRule
entryRuleParitionRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParitionRuleRule()); }
	 iv_ruleParitionRule=ruleParitionRule 
	 { $current=$iv_ruleParitionRule.current; } 
	 EOF 
;

// Rule ParitionRule
ruleParitionRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getParitionRuleAccess().getPartitionSingleLineRuleParserRuleCall_0()); 
    }
    this_PartitionSingleLineRule_0=rulePartitionSingleLineRule
    { 
        $current = $this_PartitionSingleLineRule_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getParitionRuleAccess().getPartitionMultiLineRuleParserRuleCall_1()); 
    }
    this_PartitionMultiLineRule_1=rulePartitionMultiLineRule
    { 
        $current = $this_PartitionMultiLineRule_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getParitionRuleAccess().getPartitionJSRuleParserRuleCall_2()); 
    }
    this_PartitionJSRule_2=rulePartitionJSRule
    { 
        $current = $this_PartitionJSRule_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleScannerSingleLineRule
entryRuleScannerSingleLineRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScannerSingleLineRuleRule()); }
	 iv_ruleScannerSingleLineRule=ruleScannerSingleLineRule 
	 { $current=$iv_ruleScannerSingleLineRule.current; } 
	 EOF 
;

// Rule ScannerSingleLineRule
ruleScannerSingleLineRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='single-line' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getScannerSingleLineRuleAccess().getSingleLineKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getScannerSingleLineRuleRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getScannerSingleLineRuleAccess().getTokenScannerTokenCrossReference_1_0()); 
	}

)
)(
(
		lv_startSeq_2_0=RULE_STRING
		{
			newLeafNode(lv_startSeq_2_0, grammarAccess.getScannerSingleLineRuleAccess().getStartSeqSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScannerSingleLineRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"startSeq",
        		lv_startSeq_2_0, 
        		"STRING");
	    }

)
)	otherlv_3='=>' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getScannerSingleLineRuleAccess().getEqualsSignGreaterThanSignKeyword_3());
    }
(
(
		lv_endSeq_4_0=RULE_STRING
		{
			newLeafNode(lv_endSeq_4_0, grammarAccess.getScannerSingleLineRuleAccess().getEndSeqSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScannerSingleLineRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"endSeq",
        		lv_endSeq_4_0, 
        		"STRING");
	    }

)
)(	otherlv_5='escaped' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getScannerSingleLineRuleAccess().getEscapedKeyword_5_0());
    }
	otherlv_6='by' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getScannerSingleLineRuleAccess().getByKeyword_5_1());
    }
(
(
		lv_escapeSeq_7_0=RULE_STRING
		{
			newLeafNode(lv_escapeSeq_7_0, grammarAccess.getScannerSingleLineRuleAccess().getEscapeSeqSTRINGTerminalRuleCall_5_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScannerSingleLineRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"escapeSeq",
        		lv_escapeSeq_7_0, 
        		"STRING");
	    }

)
))?)
;





// Entry rule entryRulePartitionSingleLineRule
entryRulePartitionSingleLineRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPartitionSingleLineRuleRule()); }
	 iv_rulePartitionSingleLineRule=rulePartitionSingleLineRule 
	 { $current=$iv_rulePartitionSingleLineRule.current; } 
	 EOF 
;

// Rule PartitionSingleLineRule
rulePartitionSingleLineRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='single-line' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPartitionSingleLineRuleAccess().getSingleLineKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPartitionSingleLineRuleRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getPartitionSingleLineRuleAccess().getParitionPartitionCrossReference_1_0()); 
	}

)
)(
(
		lv_startSeq_2_0=RULE_STRING
		{
			newLeafNode(lv_startSeq_2_0, grammarAccess.getPartitionSingleLineRuleAccess().getStartSeqSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPartitionSingleLineRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"startSeq",
        		lv_startSeq_2_0, 
        		"STRING");
	    }

)
)	otherlv_3='=>' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPartitionSingleLineRuleAccess().getEqualsSignGreaterThanSignKeyword_3());
    }
(
(
		lv_endSeq_4_0=RULE_STRING
		{
			newLeafNode(lv_endSeq_4_0, grammarAccess.getPartitionSingleLineRuleAccess().getEndSeqSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPartitionSingleLineRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"endSeq",
        		lv_endSeq_4_0, 
        		"STRING");
	    }

)
)(	otherlv_5='escaped' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPartitionSingleLineRuleAccess().getEscapedKeyword_5_0());
    }
	otherlv_6='by' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPartitionSingleLineRuleAccess().getByKeyword_5_1());
    }
(
(
		lv_escapeSeq_7_0=RULE_STRING
		{
			newLeafNode(lv_escapeSeq_7_0, grammarAccess.getPartitionSingleLineRuleAccess().getEscapeSeqSTRINGTerminalRuleCall_5_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPartitionSingleLineRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"escapeSeq",
        		lv_escapeSeq_7_0, 
        		"STRING");
	    }

)
))?)
;





// Entry rule entryRuleScannerMultiLineRule
entryRuleScannerMultiLineRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScannerMultiLineRuleRule()); }
	 iv_ruleScannerMultiLineRule=ruleScannerMultiLineRule 
	 { $current=$iv_ruleScannerMultiLineRule.current; } 
	 EOF 
;

// Rule ScannerMultiLineRule
ruleScannerMultiLineRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='multi-line' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getScannerMultiLineRuleAccess().getMultiLineKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getScannerMultiLineRuleRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getScannerMultiLineRuleAccess().getTokenScannerTokenCrossReference_1_0()); 
	}

)
)(
(
		lv_startSeq_2_0=RULE_STRING
		{
			newLeafNode(lv_startSeq_2_0, grammarAccess.getScannerMultiLineRuleAccess().getStartSeqSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScannerMultiLineRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"startSeq",
        		lv_startSeq_2_0, 
        		"STRING");
	    }

)
)	otherlv_3='=>' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getScannerMultiLineRuleAccess().getEqualsSignGreaterThanSignKeyword_3());
    }
(
(
		lv_endSeq_4_0=RULE_STRING
		{
			newLeafNode(lv_endSeq_4_0, grammarAccess.getScannerMultiLineRuleAccess().getEndSeqSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScannerMultiLineRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"endSeq",
        		lv_endSeq_4_0, 
        		"STRING");
	    }

)
)(	otherlv_5='escaped' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getScannerMultiLineRuleAccess().getEscapedKeyword_5_0());
    }
	otherlv_6='by' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getScannerMultiLineRuleAccess().getByKeyword_5_1());
    }
(
(
		lv_escapeSeq_7_0=RULE_STRING
		{
			newLeafNode(lv_escapeSeq_7_0, grammarAccess.getScannerMultiLineRuleAccess().getEscapeSeqSTRINGTerminalRuleCall_5_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScannerMultiLineRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"escapeSeq",
        		lv_escapeSeq_7_0, 
        		"STRING");
	    }

)
))?)
;





// Entry rule entryRulePartitionMultiLineRule
entryRulePartitionMultiLineRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPartitionMultiLineRuleRule()); }
	 iv_rulePartitionMultiLineRule=rulePartitionMultiLineRule 
	 { $current=$iv_rulePartitionMultiLineRule.current; } 
	 EOF 
;

// Rule PartitionMultiLineRule
rulePartitionMultiLineRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='multi-line' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPartitionMultiLineRuleAccess().getMultiLineKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPartitionMultiLineRuleRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getPartitionMultiLineRuleAccess().getParitionPartitionCrossReference_1_0()); 
	}

)
)(
(
		lv_startSeq_2_0=RULE_STRING
		{
			newLeafNode(lv_startSeq_2_0, grammarAccess.getPartitionMultiLineRuleAccess().getStartSeqSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPartitionMultiLineRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"startSeq",
        		lv_startSeq_2_0, 
        		"STRING");
	    }

)
)	otherlv_3='=>' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPartitionMultiLineRuleAccess().getEqualsSignGreaterThanSignKeyword_3());
    }
(
(
		lv_endSeq_4_0=RULE_STRING
		{
			newLeafNode(lv_endSeq_4_0, grammarAccess.getPartitionMultiLineRuleAccess().getEndSeqSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPartitionMultiLineRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"endSeq",
        		lv_endSeq_4_0, 
        		"STRING");
	    }

)
)(	otherlv_5='escaped' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPartitionMultiLineRuleAccess().getEscapedKeyword_5_0());
    }
	otherlv_6='by' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPartitionMultiLineRuleAccess().getByKeyword_5_1());
    }
(
(
		lv_escapeSeq_7_0=RULE_STRING
		{
			newLeafNode(lv_escapeSeq_7_0, grammarAccess.getPartitionMultiLineRuleAccess().getEscapeSeqSTRINGTerminalRuleCall_5_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPartitionMultiLineRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"escapeSeq",
        		lv_escapeSeq_7_0, 
        		"STRING");
	    }

)
))?)
;





// Entry rule entryRuleScannerCharacterRule
entryRuleScannerCharacterRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScannerCharacterRuleRule()); }
	 iv_ruleScannerCharacterRule=ruleScannerCharacterRule 
	 { $current=$iv_ruleScannerCharacterRule.current; } 
	 EOF 
;

// Rule ScannerCharacterRule
ruleScannerCharacterRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='character-rule' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getScannerCharacterRuleAccess().getCharacterRuleKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getScannerCharacterRuleRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getScannerCharacterRuleAccess().getTokenScannerTokenCrossReference_1_0()); 
	}

)
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getScannerCharacterRuleAccess().getLeftSquareBracketKeyword_2());
    }
(
(
		lv_characters_3_0=RULE_STRING
		{
			newLeafNode(lv_characters_3_0, grammarAccess.getScannerCharacterRuleAccess().getCharactersSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScannerCharacterRuleRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"characters",
        		lv_characters_3_0, 
        		"STRING");
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getScannerCharacterRuleAccess().getCommaKeyword_4());
    }
(
(
		lv_characters_5_0=RULE_STRING
		{
			newLeafNode(lv_characters_5_0, grammarAccess.getScannerCharacterRuleAccess().getCharactersSTRINGTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScannerCharacterRuleRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"characters",
        		lv_characters_5_0, 
        		"STRING");
	    }

)
)	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getScannerCharacterRuleAccess().getRightSquareBracketKeyword_6());
    }
)
;





// Entry rule entryRuleScannerJSRule
entryRuleScannerJSRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScannerJSRuleRule()); }
	 iv_ruleScannerJSRule=ruleScannerJSRule 
	 { $current=$iv_ruleScannerJSRule.current; } 
	 EOF 
;

// Rule ScannerJSRule
ruleScannerJSRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='javascript-rule' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getScannerJSRuleAccess().getJavascriptRuleKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getScannerJSRuleRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getScannerJSRuleAccess().getTokenScannerTokenCrossReference_1_0()); 
	}

)
)(
(
		lv_fileURI_2_0=RULE_STRING
		{
			newLeafNode(lv_fileURI_2_0, grammarAccess.getScannerJSRuleAccess().getFileURISTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScannerJSRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"fileURI",
        		lv_fileURI_2_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRulePartitionJSRule
entryRulePartitionJSRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPartitionJSRuleRule()); }
	 iv_rulePartitionJSRule=rulePartitionJSRule 
	 { $current=$iv_rulePartitionJSRule.current; } 
	 EOF 
;

// Rule PartitionJSRule
rulePartitionJSRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='javascript-rule' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPartitionJSRuleAccess().getJavascriptRuleKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPartitionJSRuleRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getPartitionJSRuleAccess().getTokenPartitionCrossReference_1_0()); 
	}

)
)(
(
		lv_fileURI_2_0=RULE_STRING
		{
			newLeafNode(lv_fileURI_2_0, grammarAccess.getPartitionJSRuleAccess().getFileURISTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPartitionJSRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"fileURI",
        		lv_fileURI_2_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleScannerWhitespaceRule
entryRuleScannerWhitespaceRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScannerWhitespaceRuleRule()); }
	 iv_ruleScannerWhitespaceRule=ruleScannerWhitespaceRule 
	 { $current=$iv_ruleScannerWhitespaceRule.current; } 
	 EOF 
;

// Rule ScannerWhitespaceRule
ruleScannerWhitespaceRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='whitespace-rule' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getScannerWhitespaceRuleAccess().getWhitespaceRuleKeyword_0_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getScannerWhitespaceRuleRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getScannerWhitespaceRuleAccess().getTokenScannerTokenCrossReference_0_1_0()); 
	}

)
)?(	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getScannerWhitespaceRuleAccess().getLeftSquareBracketKeyword_0_2_0());
    }
(
(
		lv_characters_3_0=RULE_STRING
		{
			newLeafNode(lv_characters_3_0, grammarAccess.getScannerWhitespaceRuleAccess().getCharactersSTRINGTerminalRuleCall_0_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScannerWhitespaceRuleRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"characters",
        		lv_characters_3_0, 
        		"STRING");
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getScannerWhitespaceRuleAccess().getCommaKeyword_0_2_2_0());
    }
(
(
		lv_characters_5_0=RULE_STRING
		{
			newLeafNode(lv_characters_5_0, grammarAccess.getScannerWhitespaceRuleAccess().getCharactersSTRINGTerminalRuleCall_0_2_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScannerWhitespaceRuleRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"characters",
        		lv_characters_5_0, 
        		"STRING");
	    }

)
))*	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getScannerWhitespaceRuleAccess().getRightSquareBracketKeyword_0_2_3());
    }
))
    |(	otherlv_7='#{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getScannerWhitespaceRuleAccess().getNumberSignLeftCurlyBracketKeyword_1_0());
    }
(
(
		lv_jsDetector_8_0=RULE_ANY_OTHER
		{
			newLeafNode(lv_jsDetector_8_0, grammarAccess.getScannerWhitespaceRuleAccess().getJsDetectorANY_OTHERTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScannerWhitespaceRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"jsDetector",
        		lv_jsDetector_8_0, 
        		"ANY_OTHER");
	    }

)
)	otherlv_9='}#' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getScannerWhitespaceRuleAccess().getRightCurlyBracketNumberSignKeyword_1_2());
    }
))
;





// Entry rule entryRuleColor
entryRuleColor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getColorRule()); }
	 iv_ruleColor=ruleColor 
	 { $current=$iv_ruleColor.current; } 
	 EOF 
;

// Rule Color
ruleColor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getColorAccess().getRGBColorParserRuleCall()); 
    }
    this_RGBColor_0=ruleRGBColor
    { 
        $current = $this_RGBColor_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleRGBColor
entryRuleRGBColor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRGBColorRule()); }
	 iv_ruleRGBColor=ruleRGBColor 
	 { $current=$iv_ruleRGBColor.current; } 
	 EOF 
;

// Rule RGBColor
ruleRGBColor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='rgb' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRGBColorAccess().getRgbKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRGBColorAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_r_2_0=RULE_INT
		{
			newLeafNode(lv_r_2_0, grammarAccess.getRGBColorAccess().getRINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRGBColorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"r",
        		lv_r_2_0, 
        		"INT");
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRGBColorAccess().getCommaKeyword_3());
    }
(
(
		lv_g_4_0=RULE_INT
		{
			newLeafNode(lv_g_4_0, grammarAccess.getRGBColorAccess().getGINTTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRGBColorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"g",
        		lv_g_4_0, 
        		"INT");
	    }

)
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRGBColorAccess().getCommaKeyword_5());
    }
(
(
		lv_b_6_0=RULE_INT
		{
			newLeafNode(lv_b_6_0, grammarAccess.getRGBColorAccess().getBINTTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRGBColorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"b",
        		lv_b_6_0, 
        		"INT");
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRGBColorAccess().getRightParenthesisKeyword_7());
    }
)
;





// Entry rule entryRuleFont
entryRuleFont returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFontRule()); }
	 iv_ruleFont=ruleFont 
	 { $current=$iv_ruleFont.current; } 
	 EOF 
;

// Rule Font
ruleFont returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getFontAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFontRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		lv_size_1_0=RULE_INT
		{
			newLeafNode(lv_size_1_0, grammarAccess.getFontAccess().getSizeINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFontRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"size",
        		lv_size_1_0, 
        		"INT");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFontAccess().getAttributesFontTypeEnumRuleCall_2_0()); 
	    }
		lv_attributes_2_0=ruleFontType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFontRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_2_0, 
        		"FontType");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Rule FontType
ruleFontType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='bold' 
	{
        $current = grammarAccess.getFontTypeAccess().getBoldEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getFontTypeAccess().getBoldEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='italic' 
	{
        $current = grammarAccess.getFontTypeAccess().getItalicEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getFontTypeAccess().getItalicEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='underline' 
	{
        $current = grammarAccess.getFontTypeAccess().getUnderlineEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getFontTypeAccess().getUnderlineEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='strike-through' 
	{
        $current = grammarAccess.getFontTypeAccess().getStrike_throughEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getFontTypeAccess().getStrike_throughEnumLiteralDeclaration_3()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


