grammar org.eclipse.fx.code.compensator.hsl.HSL with org.eclipse.xtext.common.Terminals

generate hSL "http://www.eclipse.org/fx/code/compensator/hsl/HSL"

Model:
	name=ID '{'
		partitions+=Partition+
		damagers+=Damager+
		partitioner=Partitioner
	'}' 'for' contentTypes+=STRING+
;

Partition:
	'partition' name=ID
;

Partitioner:
	RulePartitioner | JavaLikeParitioner | JSParitioner
;

JavaLikeParitioner:
	'java-like-partitioner' '{'
		'singlelinedoc' singleLineDocParition=[Partition|ID]
		'multilinedoc' multiLineDocParition=[Partition|ID]
		'javadoc' javaDocParition=[Partition|ID]
		'char' characterParition=[Partition|ID]
		'string' stringParition=[Partition|ID]
	'}'
;

RulePartitioner:
	'rule-partitioner' '{'
		rules += ParitionRule+
	'}'
;

JSParitioner:
	'js-partitioner' fileURI=STRING
;

Damager:
	RuleDamager | JSDamager 
;

JSDamager:
	'js-damager' partition=[Partition|ID] fileURI=STRING
;

RuleDamager:
	'rule-damager' partition=[Partition|ID] '{'
		tokens			+=ScannerToken*
		keywordGroups 	+=KeywordGroup*
		rules 			+= ScannerRule*
	'}'
;

ScannerToken:
	default?='default'? 'token' name=ID ('{' 
		('fgcolor' ':' fgColor=Color)? 
		('bgcolor' ':' bgColor=Color)? 
		('font' ':' font=Font)?
	'}')?
;

KeywordGroup:
	'keywords' token=[ScannerToken|ID] '[' keywords+=Keyword (',' keywords+=Keyword)* ']'
;

Keyword:
	name=STRING ('since' version=STRING)?
;

ScannerRule:
	ScannerSingleLineRule | ScannerMultiLineRule | ScannerCharacterRule | ScannerJSRule | ScannerWhitespaceRule
;

ParitionRule:
	PartitionSingleLineRule | PartitionMultiLineRule | PartitionJSRule
;

ScannerSingleLineRule:
	'single-line' token=[ScannerToken|ID] startSeq=STRING '=>' endSeq=STRING ('escaped' 'by' escapeSeq=STRING)? 
;

PartitionSingleLineRule:
	'single-line' parition=[Partition|ID] startSeq=STRING '=>' endSeq=STRING ('escaped' 'by' escapeSeq=STRING)? 
;

ScannerMultiLineRule:
	'multi-line' token=[ScannerToken|ID] startSeq=STRING '=>' endSeq=STRING ('escaped' 'by' escapeSeq=STRING)?
;

PartitionMultiLineRule:
	'multi-line' parition=[Partition|ID] startSeq=STRING '=>' endSeq=STRING ('escaped' 'by' escapeSeq=STRING)?
;

ScannerCharacterRule:
	'character-rule' token=[ScannerToken|ID] '[' characters+=STRING (',' characters+=STRING)* ']'
;

ScannerJSRule:
	'javascript-rule' token=[ScannerToken|ID] fileURI=STRING
;

PartitionJSRule:
	'javascript-rule' token=[Partition|ID] fileURI=STRING
;

ScannerWhitespaceRule:
	'whitespace-rule' (token=[ScannerToken|ID])? (('[' characters+=STRING (',' characters+=STRING )* ']') | javawhitespace?='javawhitespace' | fileURI=STRING)
;

Color:
	RGBColor
;

RGBColor:
	'rgb' '(' r=INT ',' g=INT ',' b=INT ')'
;

Font:
	name=ID size=INT attributes+=FontType*
;

enum FontType:
	bold | italic | underline | strike_through='strike-through'  
;